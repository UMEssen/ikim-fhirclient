// This file was autogenerated. Changes are futile!

import type {
	SearchParameter,
	SearchTypeDate,
	SearchTypeNumber,
	SearchTypeQuantity,
	SearchTypeReference,
	SearchTypeString,
	SearchTypeToken,
	SearchTypeUri,
} from '@';

type R4SearchParamsTypes =
	| 'Account'
	| 'ActivityDefinition'
	| 'AdverseEvent'
	| 'AllergyIntolerance'
	| 'Appointment'
	| 'AppointmentResponse'
	| 'AuditEvent'
	| 'Basic'
	| 'Binary'
	| 'BiologicallyDerivedProduct'
	| 'BodyStructure'
	| 'Bundle'
	| 'CapabilityStatement'
	| 'CarePlan'
	| 'CareTeam'
	| 'CatalogEntry'
	| 'ChargeItem'
	| 'ChargeItemDefinition'
	| 'Claim'
	| 'ClaimResponse'
	| 'ClinicalImpression'
	| 'CodeSystem'
	| 'Communication'
	| 'CommunicationRequest'
	| 'CompartmentDefinition'
	| 'Composition'
	| 'ConceptMap'
	| 'Condition'
	| 'Consent'
	| 'Contract'
	| 'Coverage'
	| 'CoverageEligibilityRequest'
	| 'CoverageEligibilityResponse'
	| 'DetectedIssue'
	| 'Device'
	| 'DeviceDefinition'
	| 'DeviceMetric'
	| 'DeviceRequest'
	| 'DeviceUseStatement'
	| 'DiagnosticReport'
	| 'DocumentManifest'
	| 'DocumentReference'
	| 'EffectEvidenceSynthesis'
	| 'Encounter'
	| 'Endpoint'
	| 'EnrollmentRequest'
	| 'EnrollmentResponse'
	| 'EpisodeOfCare'
	| 'EventDefinition'
	| 'Evidence'
	| 'EvidenceVariable'
	| 'ExampleScenario'
	| 'ExplanationOfBenefit'
	| 'FamilyMemberHistory'
	| 'Flag'
	| 'Goal'
	| 'GraphDefinition'
	| 'Group'
	| 'GuidanceResponse'
	| 'HealthcareService'
	| 'ImagingStudy'
	| 'Immunization'
	| 'ImmunizationEvaluation'
	| 'ImmunizationRecommendation'
	| 'ImplementationGuide'
	| 'InsurancePlan'
	| 'Invoice'
	| 'Library'
	| 'Linkage'
	| 'List'
	| 'Location'
	| 'Measure'
	| 'MeasureReport'
	| 'Media'
	| 'Medication'
	| 'MedicationAdministration'
	| 'MedicationDispense'
	| 'MedicationKnowledge'
	| 'MedicationRequest'
	| 'MedicationStatement'
	| 'MedicinalProduct'
	| 'MedicinalProductAuthorization'
	| 'MedicinalProductContraindication'
	| 'MedicinalProductIndication'
	| 'MedicinalProductIngredient'
	| 'MedicinalProductInteraction'
	| 'MedicinalProductManufactured'
	| 'MedicinalProductPackaged'
	| 'MedicinalProductPharmaceutical'
	| 'MedicinalProductUndesirableEffect'
	| 'MessageDefinition'
	| 'MessageHeader'
	| 'MolecularSequence'
	| 'NamingSystem'
	| 'NutritionOrder'
	| 'Observation'
	| 'ObservationDefinition'
	| 'OperationDefinition'
	| 'OperationOutcome'
	| 'Organization'
	| 'OrganizationAffiliation'
	| 'Patient'
	| 'PaymentNotice'
	| 'PaymentReconciliation'
	| 'Person'
	| 'PlanDefinition'
	| 'Practitioner'
	| 'PractitionerRole'
	| 'Procedure'
	| 'Provenance'
	| 'Questionnaire'
	| 'QuestionnaireResponse'
	| 'RelatedPerson'
	| 'RequestGroup'
	| 'ResearchDefinition'
	| 'ResearchElementDefinition'
	| 'ResearchStudy'
	| 'ResearchSubject'
	| 'RiskAssessment'
	| 'RiskEvidenceSynthesis'
	| 'Schedule'
	| 'SearchParameter'
	| 'ServiceRequest'
	| 'Slot'
	| 'Specimen'
	| 'SpecimenDefinition'
	| 'StructureDefinition'
	| 'StructureMap'
	| 'Subscription'
	| 'Substance'
	| 'SubstanceNucleicAcid'
	| 'SubstancePolymer'
	| 'SubstanceProtein'
	| 'SubstanceReferenceInformation'
	| 'SubstanceSourceMaterial'
	| 'SubstanceSpecification'
	| 'SupplyDelivery'
	| 'SupplyRequest'
	| 'Task'
	| 'TerminologyCapabilities'
	| 'TestReport'
	| 'TestScript'
	| 'ValueSet'
	| 'VerificationResult'
	| 'VisionPrescription';

export type R4SearchParamsAll = {
	_text?: SearchParameter<SearchTypeString>;
	something?: SearchParameter<SearchTypeString>;
	_list?: SearchParameter<SearchTypeToken>;
	_has?: SearchParameter<SearchTypeString>;
	_type?: SearchParameter<SearchTypeToken>;
	_sort?: SearchParameter<SearchTypeToken>;
	_count?: SearchParameter<SearchTypeNumber>;
	_include?: SearchParameter<SearchTypeToken>;
	_revinclude?: SearchParameter<SearchTypeToken>;
	_summary?: SearchParameter<SearchTypeToken>;
	_elements?: SearchParameter<SearchTypeString>;
	_contained?: SearchParameter<SearchTypeToken>;
	_containedType?: SearchParameter<SearchTypeToken>;
	_query?: SearchParameter<SearchTypeToken>;
	_profile?: SearchParameter<SearchTypeUri>;
	_lastUpdated?: SearchParameter<SearchTypeDate>;
	_tag?: SearchParameter<SearchTypeToken>;
	_security?: SearchParameter<SearchTypeToken>;
	_source?: SearchParameter<SearchTypeUri>;
	_id?: SearchParameter<SearchTypeToken>;
	_content?: SearchParameter<SearchTypeString>;
};

export type R4SearchParamsAccount = {
	owner?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	identifier?: SearchParameter<SearchTypeToken>;
	period?: SearchParameter<SearchTypeDate>;
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	name?: SearchParameter<SearchTypeString>;
	type?: SearchParameter<SearchTypeToken>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsActivityDefinition = {
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	successor?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	contextTypeValue?: SearchParameter<SearchTypeString>;
	jurisdiction?: SearchParameter<SearchTypeToken>;
	description?: SearchParameter<SearchTypeString>;
	derivedFrom?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	contextType?: SearchParameter<SearchTypeToken>;
	predecessor?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	title?: SearchParameter<SearchTypeString>;
	composedOf?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	version?: SearchParameter<SearchTypeToken>;
	url?: SearchParameter<SearchTypeUri>;
	contextQuantity?: SearchParameter<SearchTypeQuantity>;
	effective?: SearchParameter<SearchTypeDate>;
	dependsOn?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	name?: SearchParameter<SearchTypeString>;
	context?: SearchParameter<SearchTypeToken>;
	publisher?: SearchParameter<SearchTypeString>;
	topic?: SearchParameter<SearchTypeToken>;
	contextTypeQuantity?: SearchParameter<SearchTypeString>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsAdverseEvent = {
	date?: SearchParameter<SearchTypeDate>;
	severity?: SearchParameter<SearchTypeToken>;
	recorder?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	study?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	actuality?: SearchParameter<SearchTypeToken>;
	seriousness?: SearchParameter<SearchTypeToken>;
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	resultingcondition?: SearchParameter<
		SearchTypeReference<R4SearchParamsTypes>
	>;
	substance?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	location?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	category?: SearchParameter<SearchTypeToken>;
	event?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsAllergyIntolerance = {
	severity?: SearchParameter<SearchTypeToken>;
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	manifestation?: SearchParameter<SearchTypeToken>;
	recorder?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	code?: SearchParameter<SearchTypeToken>;
	verificationStatus?: SearchParameter<SearchTypeToken>;
	criticality?: SearchParameter<SearchTypeToken>;
	clinicalStatus?: SearchParameter<SearchTypeToken>;
	type?: SearchParameter<SearchTypeToken>;
	onset?: SearchParameter<SearchTypeDate>;
	route?: SearchParameter<SearchTypeToken>;
	asserter?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	category?: SearchParameter<SearchTypeToken>;
	lastDate?: SearchParameter<SearchTypeDate>;
} & R4SearchParamsAll;

export type R4SearchParamsAppointment = {
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	specialty?: SearchParameter<SearchTypeToken>;
	serviceCategory?: SearchParameter<SearchTypeToken>;
	practitioner?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	partStatus?: SearchParameter<SearchTypeToken>;
	appointmentType?: SearchParameter<SearchTypeToken>;
	serviceType?: SearchParameter<SearchTypeToken>;
	slot?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	reasonCode?: SearchParameter<SearchTypeToken>;
	actor?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	basedOn?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	reasonReference?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	supportingInfo?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	location?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsAppointmentResponse = {
	actor?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	identifier?: SearchParameter<SearchTypeToken>;
	practitioner?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	partStatus?: SearchParameter<SearchTypeToken>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	appointment?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	location?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
} & R4SearchParamsAll;

export type R4SearchParamsAuditEvent = {
	date?: SearchParameter<SearchTypeDate>;
	entityType?: SearchParameter<SearchTypeToken>;
	agent?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	address?: SearchParameter<SearchTypeString>;
	entityRole?: SearchParameter<SearchTypeToken>;
	source?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	type?: SearchParameter<SearchTypeToken>;
	altid?: SearchParameter<SearchTypeToken>;
	site?: SearchParameter<SearchTypeToken>;
	agentName?: SearchParameter<SearchTypeString>;
	entityName?: SearchParameter<SearchTypeString>;
	subtype?: SearchParameter<SearchTypeToken>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	action?: SearchParameter<SearchTypeToken>;
	agentRole?: SearchParameter<SearchTypeToken>;
	entity?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	outcome?: SearchParameter<SearchTypeToken>;
	policy?: SearchParameter<SearchTypeUri>;
} & R4SearchParamsAll;

export type R4SearchParamsBasic = {
	identifier?: SearchParameter<SearchTypeToken>;
	code?: SearchParameter<SearchTypeToken>;
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	created?: SearchParameter<SearchTypeDate>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	author?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
} & R4SearchParamsAll;

export type R4SearchParamsBinary = {} & R4SearchParamsAll;

export type R4SearchParamsBiologicallyDerivedProduct = {} & R4SearchParamsAll;

export type R4SearchParamsBodyStructure = {
	identifier?: SearchParameter<SearchTypeToken>;
	morphology?: SearchParameter<SearchTypeToken>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	location?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsBundle = {
	identifier?: SearchParameter<SearchTypeToken>;
	composition?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	type?: SearchParameter<SearchTypeToken>;
	message?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	timestamp?: SearchParameter<SearchTypeDate>;
} & R4SearchParamsAll;

export type R4SearchParamsCapabilityStatement = {
	date?: SearchParameter<SearchTypeDate>;
	resourceProfile?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	contextTypeValue?: SearchParameter<SearchTypeString>;
	software?: SearchParameter<SearchTypeString>;
	resource?: SearchParameter<SearchTypeToken>;
	jurisdiction?: SearchParameter<SearchTypeToken>;
	format?: SearchParameter<SearchTypeToken>;
	description?: SearchParameter<SearchTypeString>;
	contextType?: SearchParameter<SearchTypeToken>;
	title?: SearchParameter<SearchTypeString>;
	fhirversion?: SearchParameter<SearchTypeToken>;
	version?: SearchParameter<SearchTypeToken>;
	url?: SearchParameter<SearchTypeUri>;
	supportedProfile?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	mode?: SearchParameter<SearchTypeToken>;
	contextQuantity?: SearchParameter<SearchTypeQuantity>;
	securityService?: SearchParameter<SearchTypeToken>;
	name?: SearchParameter<SearchTypeString>;
	context?: SearchParameter<SearchTypeToken>;
	publisher?: SearchParameter<SearchTypeString>;
	contextTypeQuantity?: SearchParameter<SearchTypeString>;
	guide?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsCarePlan = {
	date?: SearchParameter<SearchTypeDate>;
	careTeam?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	identifier?: SearchParameter<SearchTypeToken>;
	performer?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	goal?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	replaces?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	instantiatesCanonical?: SearchParameter<
		SearchTypeReference<R4SearchParamsTypes>
	>;
	partOf?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	encounter?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	intent?: SearchParameter<SearchTypeToken>;
	activityReference?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	condition?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	basedOn?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	activityDate?: SearchParameter<SearchTypeDate>;
	instantiatesUri?: SearchParameter<SearchTypeUri>;
	category?: SearchParameter<SearchTypeToken>;
	activityCode?: SearchParameter<SearchTypeToken>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsCareTeam = {
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	encounter?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	category?: SearchParameter<SearchTypeToken>;
	participant?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsCatalogEntry = {} & R4SearchParamsAll;

export type R4SearchParamsChargeItem = {
	identifier?: SearchParameter<SearchTypeToken>;
	performingOrganization?: SearchParameter<
		SearchTypeReference<R4SearchParamsTypes>
	>;
	code?: SearchParameter<SearchTypeToken>;
	quantity?: SearchParameter<SearchTypeQuantity>;
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	occurrence?: SearchParameter<SearchTypeDate>;
	enteredDate?: SearchParameter<SearchTypeDate>;
	performerFunction?: SearchParameter<SearchTypeToken>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	factorOverride?: SearchParameter<SearchTypeNumber>;
	service?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	priceOverride?: SearchParameter<SearchTypeQuantity>;
	context?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	enterer?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	performerActor?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	account?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	requestingOrganization?: SearchParameter<
		SearchTypeReference<R4SearchParamsTypes>
	>;
} & R4SearchParamsAll;

export type R4SearchParamsChargeItemDefinition = {
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	contextTypeValue?: SearchParameter<SearchTypeString>;
	jurisdiction?: SearchParameter<SearchTypeToken>;
	description?: SearchParameter<SearchTypeString>;
	contextType?: SearchParameter<SearchTypeToken>;
	title?: SearchParameter<SearchTypeString>;
	version?: SearchParameter<SearchTypeToken>;
	url?: SearchParameter<SearchTypeUri>;
	contextQuantity?: SearchParameter<SearchTypeQuantity>;
	effective?: SearchParameter<SearchTypeDate>;
	context?: SearchParameter<SearchTypeToken>;
	publisher?: SearchParameter<SearchTypeString>;
	contextTypeQuantity?: SearchParameter<SearchTypeString>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsClaim = {
	careTeam?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	identifier?: SearchParameter<SearchTypeToken>;
	use?: SearchParameter<SearchTypeToken>;
	created?: SearchParameter<SearchTypeDate>;
	encounter?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	priority?: SearchParameter<SearchTypeToken>;
	payee?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	provider?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	insurer?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	detailUdi?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	enterer?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	procedureUdi?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	subdetailUdi?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	facility?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	itemUdi?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsClaimResponse = {
	identifier?: SearchParameter<SearchTypeToken>;
	request?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	disposition?: SearchParameter<SearchTypeString>;
	insurer?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	created?: SearchParameter<SearchTypeDate>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	use?: SearchParameter<SearchTypeToken>;
	paymentDate?: SearchParameter<SearchTypeDate>;
	outcome?: SearchParameter<SearchTypeToken>;
	requestor?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsClinicalImpression = {
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	previous?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	findingCode?: SearchParameter<SearchTypeToken>;
	assessor?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	encounter?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	findingRef?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	problem?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	supportingInfo?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	investigation?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsCodeSystem = {
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	code?: SearchParameter<SearchTypeToken>;
	contextTypeValue?: SearchParameter<SearchTypeString>;
	contentMode?: SearchParameter<SearchTypeToken>;
	jurisdiction?: SearchParameter<SearchTypeToken>;
	description?: SearchParameter<SearchTypeString>;
	contextType?: SearchParameter<SearchTypeToken>;
	language?: SearchParameter<SearchTypeToken>;
	title?: SearchParameter<SearchTypeString>;
	version?: SearchParameter<SearchTypeToken>;
	url?: SearchParameter<SearchTypeUri>;
	contextQuantity?: SearchParameter<SearchTypeQuantity>;
	supplements?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	system?: SearchParameter<SearchTypeUri>;
	name?: SearchParameter<SearchTypeString>;
	context?: SearchParameter<SearchTypeToken>;
	publisher?: SearchParameter<SearchTypeString>;
	contextTypeQuantity?: SearchParameter<SearchTypeString>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsCommunication = {
	identifier?: SearchParameter<SearchTypeToken>;
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	instantiatesCanonical?: SearchParameter<
		SearchTypeReference<R4SearchParamsTypes>
	>;
	received?: SearchParameter<SearchTypeDate>;
	partOf?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	medium?: SearchParameter<SearchTypeToken>;
	encounter?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	sent?: SearchParameter<SearchTypeDate>;
	basedOn?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	sender?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	recipient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	instantiatesUri?: SearchParameter<SearchTypeUri>;
	category?: SearchParameter<SearchTypeToken>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsCommunicationRequest = {
	requester?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	authored?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	replaces?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	medium?: SearchParameter<SearchTypeToken>;
	encounter?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	occurrence?: SearchParameter<SearchTypeDate>;
	priority?: SearchParameter<SearchTypeToken>;
	groupIdentifier?: SearchParameter<SearchTypeToken>;
	basedOn?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	sender?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	recipient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	category?: SearchParameter<SearchTypeToken>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsCompartmentDefinition = {
	date?: SearchParameter<SearchTypeDate>;
	code?: SearchParameter<SearchTypeToken>;
	contextTypeValue?: SearchParameter<SearchTypeString>;
	resource?: SearchParameter<SearchTypeToken>;
	description?: SearchParameter<SearchTypeString>;
	contextType?: SearchParameter<SearchTypeToken>;
	version?: SearchParameter<SearchTypeToken>;
	url?: SearchParameter<SearchTypeUri>;
	contextQuantity?: SearchParameter<SearchTypeQuantity>;
	name?: SearchParameter<SearchTypeString>;
	context?: SearchParameter<SearchTypeToken>;
	publisher?: SearchParameter<SearchTypeString>;
	contextTypeQuantity?: SearchParameter<SearchTypeString>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsComposition = {
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	period?: SearchParameter<SearchTypeDate>;
	relatedId?: SearchParameter<SearchTypeToken>;
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	author?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	confidentiality?: SearchParameter<SearchTypeToken>;
	section?: SearchParameter<SearchTypeToken>;
	encounter?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	type?: SearchParameter<SearchTypeToken>;
	title?: SearchParameter<SearchTypeString>;
	attester?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	entry?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	relatedRef?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	context?: SearchParameter<SearchTypeToken>;
	category?: SearchParameter<SearchTypeToken>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsConceptMap = {
	date?: SearchParameter<SearchTypeDate>;
	other?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	contextTypeValue?: SearchParameter<SearchTypeString>;
	targetSystem?: SearchParameter<SearchTypeUri>;
	dependson?: SearchParameter<SearchTypeUri>;
	jurisdiction?: SearchParameter<SearchTypeToken>;
	description?: SearchParameter<SearchTypeString>;
	contextType?: SearchParameter<SearchTypeToken>;
	source?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	title?: SearchParameter<SearchTypeString>;
	contextQuantity?: SearchParameter<SearchTypeQuantity>;
	sourceUri?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	context?: SearchParameter<SearchTypeToken>;
	contextTypeQuantity?: SearchParameter<SearchTypeString>;
	sourceSystem?: SearchParameter<SearchTypeUri>;
	targetCode?: SearchParameter<SearchTypeToken>;
	targetUri?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	identifier?: SearchParameter<SearchTypeToken>;
	product?: SearchParameter<SearchTypeUri>;
	version?: SearchParameter<SearchTypeToken>;
	url?: SearchParameter<SearchTypeUri>;
	target?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	sourceCode?: SearchParameter<SearchTypeToken>;
	name?: SearchParameter<SearchTypeString>;
	publisher?: SearchParameter<SearchTypeString>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsCondition = {
	severity?: SearchParameter<SearchTypeToken>;
	evidenceDetail?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	identifier?: SearchParameter<SearchTypeToken>;
	onsetInfo?: SearchParameter<SearchTypeString>;
	recordedDate?: SearchParameter<SearchTypeDate>;
	code?: SearchParameter<SearchTypeToken>;
	evidence?: SearchParameter<SearchTypeToken>;
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	verificationStatus?: SearchParameter<SearchTypeToken>;
	clinicalStatus?: SearchParameter<SearchTypeToken>;
	encounter?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	onsetDate?: SearchParameter<SearchTypeDate>;
	abatementDate?: SearchParameter<SearchTypeDate>;
	asserter?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	stage?: SearchParameter<SearchTypeToken>;
	abatementString?: SearchParameter<SearchTypeString>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	onsetAge?: SearchParameter<SearchTypeQuantity>;
	abatementAge?: SearchParameter<SearchTypeQuantity>;
	category?: SearchParameter<SearchTypeToken>;
	bodySite?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsConsent = {
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	period?: SearchParameter<SearchTypeDate>;
	data?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	purpose?: SearchParameter<SearchTypeToken>;
	sourceReference?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	actor?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	securityLabel?: SearchParameter<SearchTypeToken>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	organization?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	scope?: SearchParameter<SearchTypeToken>;
	action?: SearchParameter<SearchTypeToken>;
	consentor?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	category?: SearchParameter<SearchTypeToken>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsContract = {
	identifier?: SearchParameter<SearchTypeToken>;
	instantiates?: SearchParameter<SearchTypeUri>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	authority?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	domain?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	issued?: SearchParameter<SearchTypeDate>;
	url?: SearchParameter<SearchTypeUri>;
	signer?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsCoverage = {
	identifier?: SearchParameter<SearchTypeToken>;
	payor?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	subscriber?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	beneficiary?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	classValue?: SearchParameter<SearchTypeString>;
	type?: SearchParameter<SearchTypeToken>;
	dependent?: SearchParameter<SearchTypeString>;
	classType?: SearchParameter<SearchTypeToken>;
	policyHolder?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsCoverageEligibilityRequest = {
	identifier?: SearchParameter<SearchTypeToken>;
	provider?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	created?: SearchParameter<SearchTypeDate>;
	enterer?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	facility?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsCoverageEligibilityResponse = {
	identifier?: SearchParameter<SearchTypeToken>;
	request?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	disposition?: SearchParameter<SearchTypeString>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	insurer?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	created?: SearchParameter<SearchTypeDate>;
	outcome?: SearchParameter<SearchTypeToken>;
	requestor?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsDetectedIssue = {
	identifier?: SearchParameter<SearchTypeToken>;
	code?: SearchParameter<SearchTypeToken>;
	identified?: SearchParameter<SearchTypeDate>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	author?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	implicated?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
} & R4SearchParamsAll;

export type R4SearchParamsDevice = {
	udiDi?: SearchParameter<SearchTypeString>;
	identifier?: SearchParameter<SearchTypeToken>;
	udiCarrier?: SearchParameter<SearchTypeString>;
	deviceName?: SearchParameter<SearchTypeString>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	organization?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	model?: SearchParameter<SearchTypeString>;
	location?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	type?: SearchParameter<SearchTypeToken>;
	url?: SearchParameter<SearchTypeUri>;
	manufacturer?: SearchParameter<SearchTypeString>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsDeviceDefinition = {
	parent?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	identifier?: SearchParameter<SearchTypeToken>;
	type?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsDeviceMetric = {
	parent?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	identifier?: SearchParameter<SearchTypeToken>;
	source?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	type?: SearchParameter<SearchTypeToken>;
	category?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsDeviceRequest = {
	requester?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	insurance?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	identifier?: SearchParameter<SearchTypeToken>;
	code?: SearchParameter<SearchTypeToken>;
	performer?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	eventDate?: SearchParameter<SearchTypeDate>;
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	instantiatesCanonical?: SearchParameter<
		SearchTypeReference<R4SearchParamsTypes>
	>;
	encounter?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	authoredOn?: SearchParameter<SearchTypeDate>;
	intent?: SearchParameter<SearchTypeToken>;
	groupIdentifier?: SearchParameter<SearchTypeToken>;
	basedOn?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	instantiatesUri?: SearchParameter<SearchTypeUri>;
	priorRequest?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	device?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsDeviceUseStatement = {
	identifier?: SearchParameter<SearchTypeToken>;
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	device?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
} & R4SearchParamsAll;

export type R4SearchParamsDiagnosticReport = {
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	performer?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	code?: SearchParameter<SearchTypeToken>;
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	media?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	encounter?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	result?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	conclusion?: SearchParameter<SearchTypeToken>;
	basedOn?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	specimen?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	issued?: SearchParameter<SearchTypeDate>;
	category?: SearchParameter<SearchTypeToken>;
	resultsInterpreter?: SearchParameter<
		SearchTypeReference<R4SearchParamsTypes>
	>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsDocumentManifest = {
	identifier?: SearchParameter<SearchTypeToken>;
	item?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	relatedId?: SearchParameter<SearchTypeToken>;
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	author?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	created?: SearchParameter<SearchTypeDate>;
	description?: SearchParameter<SearchTypeString>;
	source?: SearchParameter<SearchTypeUri>;
	type?: SearchParameter<SearchTypeToken>;
	relatedRef?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	recipient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsDocumentReference = {
	date?: SearchParameter<SearchTypeDate>;
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	description?: SearchParameter<SearchTypeString>;
	language?: SearchParameter<SearchTypeToken>;
	type?: SearchParameter<SearchTypeToken>;
	relation?: SearchParameter<SearchTypeToken>;
	setting?: SearchParameter<SearchTypeToken>;
	related?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	relationship?: SearchParameter<SearchTypeString>;
	event?: SearchParameter<SearchTypeToken>;
	authenticator?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	identifier?: SearchParameter<SearchTypeToken>;
	period?: SearchParameter<SearchTypeDate>;
	custodian?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	author?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	format?: SearchParameter<SearchTypeToken>;
	encounter?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	contenttype?: SearchParameter<SearchTypeToken>;
	securityLabel?: SearchParameter<SearchTypeToken>;
	location?: SearchParameter<SearchTypeUri>;
	category?: SearchParameter<SearchTypeToken>;
	relatesto?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	facility?: SearchParameter<SearchTypeToken>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsEffectEvidenceSynthesis = {
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	contextTypeValue?: SearchParameter<SearchTypeString>;
	jurisdiction?: SearchParameter<SearchTypeToken>;
	description?: SearchParameter<SearchTypeString>;
	contextType?: SearchParameter<SearchTypeToken>;
	title?: SearchParameter<SearchTypeString>;
	version?: SearchParameter<SearchTypeToken>;
	url?: SearchParameter<SearchTypeUri>;
	contextQuantity?: SearchParameter<SearchTypeQuantity>;
	effective?: SearchParameter<SearchTypeDate>;
	name?: SearchParameter<SearchTypeString>;
	context?: SearchParameter<SearchTypeToken>;
	publisher?: SearchParameter<SearchTypeString>;
	contextTypeQuantity?: SearchParameter<SearchTypeString>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsEncounter = {
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	participantType?: SearchParameter<SearchTypeToken>;
	practitioner?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	length?: SearchParameter<SearchTypeQuantity>;
	episodeOfCare?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	diagnosis?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	appointment?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	partOf?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	type?: SearchParameter<SearchTypeToken>;
	reasonCode?: SearchParameter<SearchTypeToken>;
	participant?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	basedOn?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	reasonReference?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	locationPeriod?: SearchParameter<SearchTypeDate>;
	location?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	serviceProvider?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	specialArrangement?: SearchParameter<SearchTypeToken>;
	class?: SearchParameter<SearchTypeToken>;
	account?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsEndpoint = {
	payloadType?: SearchParameter<SearchTypeToken>;
	identifier?: SearchParameter<SearchTypeToken>;
	organization?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	connectionType?: SearchParameter<SearchTypeToken>;
	name?: SearchParameter<SearchTypeString>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsEnrollmentRequest = {
	identifier?: SearchParameter<SearchTypeToken>;
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsEnrollmentResponse = {
	identifier?: SearchParameter<SearchTypeToken>;
	request?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsEpisodeOfCare = {
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	condition?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	organization?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	type?: SearchParameter<SearchTypeToken>;
	careManager?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	status?: SearchParameter<SearchTypeToken>;
	incomingReferral?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
} & R4SearchParamsAll;

export type R4SearchParamsEventDefinition = {
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	successor?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	contextTypeValue?: SearchParameter<SearchTypeString>;
	jurisdiction?: SearchParameter<SearchTypeToken>;
	description?: SearchParameter<SearchTypeString>;
	derivedFrom?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	contextType?: SearchParameter<SearchTypeToken>;
	predecessor?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	title?: SearchParameter<SearchTypeString>;
	composedOf?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	version?: SearchParameter<SearchTypeToken>;
	url?: SearchParameter<SearchTypeUri>;
	contextQuantity?: SearchParameter<SearchTypeQuantity>;
	effective?: SearchParameter<SearchTypeDate>;
	dependsOn?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	name?: SearchParameter<SearchTypeString>;
	context?: SearchParameter<SearchTypeToken>;
	publisher?: SearchParameter<SearchTypeString>;
	topic?: SearchParameter<SearchTypeToken>;
	contextTypeQuantity?: SearchParameter<SearchTypeString>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsEvidence = {
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	successor?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	contextTypeValue?: SearchParameter<SearchTypeString>;
	jurisdiction?: SearchParameter<SearchTypeToken>;
	description?: SearchParameter<SearchTypeString>;
	derivedFrom?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	contextType?: SearchParameter<SearchTypeToken>;
	predecessor?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	title?: SearchParameter<SearchTypeString>;
	composedOf?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	version?: SearchParameter<SearchTypeToken>;
	url?: SearchParameter<SearchTypeUri>;
	contextQuantity?: SearchParameter<SearchTypeQuantity>;
	effective?: SearchParameter<SearchTypeDate>;
	dependsOn?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	name?: SearchParameter<SearchTypeString>;
	context?: SearchParameter<SearchTypeToken>;
	publisher?: SearchParameter<SearchTypeString>;
	topic?: SearchParameter<SearchTypeToken>;
	contextTypeQuantity?: SearchParameter<SearchTypeString>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsEvidenceVariable = {
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	successor?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	contextTypeValue?: SearchParameter<SearchTypeString>;
	jurisdiction?: SearchParameter<SearchTypeToken>;
	description?: SearchParameter<SearchTypeString>;
	derivedFrom?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	contextType?: SearchParameter<SearchTypeToken>;
	predecessor?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	title?: SearchParameter<SearchTypeString>;
	composedOf?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	version?: SearchParameter<SearchTypeToken>;
	url?: SearchParameter<SearchTypeUri>;
	contextQuantity?: SearchParameter<SearchTypeQuantity>;
	effective?: SearchParameter<SearchTypeDate>;
	dependsOn?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	name?: SearchParameter<SearchTypeString>;
	context?: SearchParameter<SearchTypeToken>;
	publisher?: SearchParameter<SearchTypeString>;
	topic?: SearchParameter<SearchTypeToken>;
	contextTypeQuantity?: SearchParameter<SearchTypeString>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsExampleScenario = {
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	contextTypeValue?: SearchParameter<SearchTypeString>;
	jurisdiction?: SearchParameter<SearchTypeToken>;
	contextType?: SearchParameter<SearchTypeToken>;
	version?: SearchParameter<SearchTypeToken>;
	url?: SearchParameter<SearchTypeUri>;
	contextQuantity?: SearchParameter<SearchTypeQuantity>;
	name?: SearchParameter<SearchTypeString>;
	context?: SearchParameter<SearchTypeToken>;
	publisher?: SearchParameter<SearchTypeString>;
	contextTypeQuantity?: SearchParameter<SearchTypeString>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsExplanationOfBenefit = {
	coverage?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	careTeam?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	identifier?: SearchParameter<SearchTypeToken>;
	created?: SearchParameter<SearchTypeDate>;
	encounter?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	payee?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	disposition?: SearchParameter<SearchTypeString>;
	provider?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	detailUdi?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	claim?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	enterer?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	procedureUdi?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	subdetailUdi?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	facility?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	itemUdi?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsFamilyMemberHistory = {
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	code?: SearchParameter<SearchTypeToken>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	sex?: SearchParameter<SearchTypeToken>;
	instantiatesCanonical?: SearchParameter<
		SearchTypeReference<R4SearchParamsTypes>
	>;
	instantiatesUri?: SearchParameter<SearchTypeUri>;
	relationship?: SearchParameter<SearchTypeToken>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsFlag = {
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	author?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	encounter?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
} & R4SearchParamsAll;

export type R4SearchParamsGoal = {
	identifier?: SearchParameter<SearchTypeToken>;
	lifecycleStatus?: SearchParameter<SearchTypeToken>;
	achievementStatus?: SearchParameter<SearchTypeToken>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	startDate?: SearchParameter<SearchTypeDate>;
	category?: SearchParameter<SearchTypeToken>;
	targetDate?: SearchParameter<SearchTypeDate>;
} & R4SearchParamsAll;

export type R4SearchParamsGraphDefinition = {
	date?: SearchParameter<SearchTypeDate>;
	contextTypeValue?: SearchParameter<SearchTypeString>;
	jurisdiction?: SearchParameter<SearchTypeToken>;
	start?: SearchParameter<SearchTypeToken>;
	description?: SearchParameter<SearchTypeString>;
	contextType?: SearchParameter<SearchTypeToken>;
	version?: SearchParameter<SearchTypeToken>;
	url?: SearchParameter<SearchTypeUri>;
	contextQuantity?: SearchParameter<SearchTypeQuantity>;
	name?: SearchParameter<SearchTypeString>;
	context?: SearchParameter<SearchTypeToken>;
	publisher?: SearchParameter<SearchTypeString>;
	contextTypeQuantity?: SearchParameter<SearchTypeString>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsGroup = {
	actual?: SearchParameter<SearchTypeToken>;
	identifier?: SearchParameter<SearchTypeToken>;
	characteristicValue?: SearchParameter<SearchTypeString>;
	managingEntity?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	code?: SearchParameter<SearchTypeToken>;
	member?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	exclude?: SearchParameter<SearchTypeToken>;
	type?: SearchParameter<SearchTypeToken>;
	value?: SearchParameter<SearchTypeToken>;
	characteristic?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsGuidanceResponse = {
	request?: SearchParameter<SearchTypeToken>;
	identifier?: SearchParameter<SearchTypeToken>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
} & R4SearchParamsAll;

export type R4SearchParamsHealthcareService = {
	identifier?: SearchParameter<SearchTypeToken>;
	specialty?: SearchParameter<SearchTypeToken>;
	endpoint?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	serviceCategory?: SearchParameter<SearchTypeToken>;
	coverageArea?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	serviceType?: SearchParameter<SearchTypeToken>;
	organization?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	name?: SearchParameter<SearchTypeString>;
	active?: SearchParameter<SearchTypeToken>;
	location?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	program?: SearchParameter<SearchTypeToken>;
	characteristic?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsImagingStudy = {
	identifier?: SearchParameter<SearchTypeToken>;
	reason?: SearchParameter<SearchTypeToken>;
	dicomClass?: SearchParameter<SearchTypeToken>;
	modality?: SearchParameter<SearchTypeToken>;
	bodysite?: SearchParameter<SearchTypeToken>;
	instance?: SearchParameter<SearchTypeToken>;
	performer?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	started?: SearchParameter<SearchTypeDate>;
	interpreter?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	encounter?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	referrer?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	endpoint?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	series?: SearchParameter<SearchTypeToken>;
	basedon?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsImmunization = {
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	performer?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	reaction?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	lotNumber?: SearchParameter<SearchTypeString>;
	statusReason?: SearchParameter<SearchTypeToken>;
	reasonCode?: SearchParameter<SearchTypeToken>;
	manufacturer?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	targetDisease?: SearchParameter<SearchTypeToken>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	series?: SearchParameter<SearchTypeString>;
	vaccineCode?: SearchParameter<SearchTypeToken>;
	reasonReference?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	location?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	status?: SearchParameter<SearchTypeToken>;
	reactionDate?: SearchParameter<SearchTypeDate>;
} & R4SearchParamsAll;

export type R4SearchParamsImmunizationEvaluation = {
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	targetDisease?: SearchParameter<SearchTypeToken>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	doseStatus?: SearchParameter<SearchTypeToken>;
	immunizationEvent?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsImmunizationRecommendation = {
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	targetDisease?: SearchParameter<SearchTypeToken>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	vaccineType?: SearchParameter<SearchTypeToken>;
	information?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	support?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsImplementationGuide = {
	date?: SearchParameter<SearchTypeDate>;
	contextTypeValue?: SearchParameter<SearchTypeString>;
	resource?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	jurisdiction?: SearchParameter<SearchTypeToken>;
	description?: SearchParameter<SearchTypeString>;
	contextType?: SearchParameter<SearchTypeToken>;
	experimental?: SearchParameter<SearchTypeToken>;
	global?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	title?: SearchParameter<SearchTypeString>;
	version?: SearchParameter<SearchTypeToken>;
	url?: SearchParameter<SearchTypeUri>;
	contextQuantity?: SearchParameter<SearchTypeQuantity>;
	dependsOn?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	name?: SearchParameter<SearchTypeString>;
	context?: SearchParameter<SearchTypeToken>;
	publisher?: SearchParameter<SearchTypeString>;
	contextTypeQuantity?: SearchParameter<SearchTypeString>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsInsurancePlan = {
	identifier?: SearchParameter<SearchTypeToken>;
	address?: SearchParameter<SearchTypeString>;
	addressState?: SearchParameter<SearchTypeString>;
	ownedBy?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	type?: SearchParameter<SearchTypeToken>;
	addressPostalcode?: SearchParameter<SearchTypeString>;
	administeredBy?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	addressCountry?: SearchParameter<SearchTypeString>;
	endpoint?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	phonetic?: SearchParameter<SearchTypeString>;
	name?: SearchParameter<SearchTypeString>;
	addressUse?: SearchParameter<SearchTypeToken>;
	addressCity?: SearchParameter<SearchTypeString>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsInvoice = {
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	totalgross?: SearchParameter<SearchTypeQuantity>;
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	participantRole?: SearchParameter<SearchTypeToken>;
	type?: SearchParameter<SearchTypeToken>;
	issuer?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	participant?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	totalnet?: SearchParameter<SearchTypeQuantity>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	recipient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	account?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsLibrary = {
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	successor?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	contextTypeValue?: SearchParameter<SearchTypeString>;
	jurisdiction?: SearchParameter<SearchTypeToken>;
	description?: SearchParameter<SearchTypeString>;
	derivedFrom?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	contextType?: SearchParameter<SearchTypeToken>;
	predecessor?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	title?: SearchParameter<SearchTypeString>;
	composedOf?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	type?: SearchParameter<SearchTypeToken>;
	version?: SearchParameter<SearchTypeToken>;
	url?: SearchParameter<SearchTypeUri>;
	contextQuantity?: SearchParameter<SearchTypeQuantity>;
	effective?: SearchParameter<SearchTypeDate>;
	dependsOn?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	name?: SearchParameter<SearchTypeString>;
	context?: SearchParameter<SearchTypeToken>;
	publisher?: SearchParameter<SearchTypeString>;
	topic?: SearchParameter<SearchTypeToken>;
	contentType?: SearchParameter<SearchTypeToken>;
	contextTypeQuantity?: SearchParameter<SearchTypeString>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsLinkage = {
	item?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	author?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	source?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
} & R4SearchParamsAll;

export type R4SearchParamsList = {
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	item?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	emptyReason?: SearchParameter<SearchTypeToken>;
	code?: SearchParameter<SearchTypeToken>;
	notes?: SearchParameter<SearchTypeString>;
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	source?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	encounter?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	title?: SearchParameter<SearchTypeString>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsLocation = {
	identifier?: SearchParameter<SearchTypeToken>;
	partof?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	address?: SearchParameter<SearchTypeString>;
	addressState?: SearchParameter<SearchTypeString>;
	operationalStatus?: SearchParameter<SearchTypeToken>;
	type?: SearchParameter<SearchTypeToken>;
	addressPostalcode?: SearchParameter<SearchTypeString>;
	addressCountry?: SearchParameter<SearchTypeString>;
	endpoint?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	organization?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	name?: SearchParameter<SearchTypeString>;
	addressUse?: SearchParameter<SearchTypeToken>;
	near?: SearchParameter<SearchTypeString>;
	addressCity?: SearchParameter<SearchTypeString>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsMeasure = {
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	successor?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	contextTypeValue?: SearchParameter<SearchTypeString>;
	jurisdiction?: SearchParameter<SearchTypeToken>;
	description?: SearchParameter<SearchTypeString>;
	derivedFrom?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	contextType?: SearchParameter<SearchTypeToken>;
	predecessor?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	title?: SearchParameter<SearchTypeString>;
	composedOf?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	version?: SearchParameter<SearchTypeToken>;
	url?: SearchParameter<SearchTypeUri>;
	contextQuantity?: SearchParameter<SearchTypeQuantity>;
	effective?: SearchParameter<SearchTypeDate>;
	dependsOn?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	name?: SearchParameter<SearchTypeString>;
	context?: SearchParameter<SearchTypeToken>;
	publisher?: SearchParameter<SearchTypeString>;
	topic?: SearchParameter<SearchTypeToken>;
	contextTypeQuantity?: SearchParameter<SearchTypeString>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsMeasureReport = {
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	period?: SearchParameter<SearchTypeDate>;
	measure?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	reporter?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	status?: SearchParameter<SearchTypeToken>;
	evaluatedResource?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
} & R4SearchParamsAll;

export type R4SearchParamsMedia = {
	identifier?: SearchParameter<SearchTypeToken>;
	modality?: SearchParameter<SearchTypeToken>;
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	created?: SearchParameter<SearchTypeDate>;
	encounter?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	type?: SearchParameter<SearchTypeToken>;
	operator?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	view?: SearchParameter<SearchTypeToken>;
	site?: SearchParameter<SearchTypeToken>;
	basedOn?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	device?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsMedication = {
	ingredientCode?: SearchParameter<SearchTypeToken>;
	identifier?: SearchParameter<SearchTypeToken>;
	code?: SearchParameter<SearchTypeToken>;
	ingredient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	form?: SearchParameter<SearchTypeToken>;
	lotNumber?: SearchParameter<SearchTypeToken>;
	expirationDate?: SearchParameter<SearchTypeDate>;
	manufacturer?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsMedicationAdministration = {
	identifier?: SearchParameter<SearchTypeToken>;
	request?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	code?: SearchParameter<SearchTypeToken>;
	performer?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	medication?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	reasonGiven?: SearchParameter<SearchTypeToken>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	effectiveTime?: SearchParameter<SearchTypeDate>;
	context?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	reasonNotGiven?: SearchParameter<SearchTypeToken>;
	device?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsMedicationDispense = {
	identifier?: SearchParameter<SearchTypeToken>;
	performer?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	code?: SearchParameter<SearchTypeToken>;
	receiver?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	destination?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	medication?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	responsibleparty?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	type?: SearchParameter<SearchTypeToken>;
	whenhandedover?: SearchParameter<SearchTypeDate>;
	whenprepared?: SearchParameter<SearchTypeDate>;
	prescription?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	context?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsMedicationKnowledge = {
	code?: SearchParameter<SearchTypeToken>;
	ingredient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	doseform?: SearchParameter<SearchTypeToken>;
	classificationType?: SearchParameter<SearchTypeToken>;
	monographType?: SearchParameter<SearchTypeToken>;
	classification?: SearchParameter<SearchTypeToken>;
	manufacturer?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	ingredientCode?: SearchParameter<SearchTypeToken>;
	sourceCost?: SearchParameter<SearchTypeToken>;
	monograph?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	monitoringProgramName?: SearchParameter<SearchTypeToken>;
	monitoringProgramType?: SearchParameter<SearchTypeToken>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsMedicationRequest = {
	requester?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	intendedDispenser?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	authoredon?: SearchParameter<SearchTypeDate>;
	code?: SearchParameter<SearchTypeToken>;
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	medication?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	encounter?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	priority?: SearchParameter<SearchTypeToken>;
	intent?: SearchParameter<SearchTypeToken>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	intendedPerformer?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	intendedPerformertype?: SearchParameter<SearchTypeToken>;
	category?: SearchParameter<SearchTypeToken>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsMedicationStatement = {
	identifier?: SearchParameter<SearchTypeToken>;
	effective?: SearchParameter<SearchTypeDate>;
	code?: SearchParameter<SearchTypeToken>;
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	context?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	medication?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	partOf?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	source?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	category?: SearchParameter<SearchTypeToken>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsMedicinalProduct = {
	identifier?: SearchParameter<SearchTypeToken>;
	name?: SearchParameter<SearchTypeString>;
	nameLanguage?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsMedicinalProductAuthorization = {
	identifier?: SearchParameter<SearchTypeToken>;
	country?: SearchParameter<SearchTypeToken>;
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	holder?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsMedicinalProductContraindication = {
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
} & R4SearchParamsAll;

export type R4SearchParamsMedicinalProductIndication = {
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
} & R4SearchParamsAll;

export type R4SearchParamsMedicinalProductIngredient = {} & R4SearchParamsAll;

export type R4SearchParamsMedicinalProductInteraction = {
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
} & R4SearchParamsAll;

export type R4SearchParamsMedicinalProductManufactured = {} & R4SearchParamsAll;

export type R4SearchParamsMedicinalProductPackaged = {
	identifier?: SearchParameter<SearchTypeToken>;
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
} & R4SearchParamsAll;

export type R4SearchParamsMedicinalProductPharmaceutical = {
	identifier?: SearchParameter<SearchTypeToken>;
	route?: SearchParameter<SearchTypeToken>;
	targetSpecies?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsMedicinalProductUndesirableEffect = {
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
} & R4SearchParamsAll;

export type R4SearchParamsMessageDefinition = {
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	parent?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	contextTypeValue?: SearchParameter<SearchTypeString>;
	jurisdiction?: SearchParameter<SearchTypeToken>;
	description?: SearchParameter<SearchTypeString>;
	focus?: SearchParameter<SearchTypeToken>;
	contextType?: SearchParameter<SearchTypeToken>;
	title?: SearchParameter<SearchTypeString>;
	version?: SearchParameter<SearchTypeToken>;
	url?: SearchParameter<SearchTypeUri>;
	contextQuantity?: SearchParameter<SearchTypeQuantity>;
	name?: SearchParameter<SearchTypeString>;
	context?: SearchParameter<SearchTypeToken>;
	publisher?: SearchParameter<SearchTypeString>;
	event?: SearchParameter<SearchTypeToken>;
	category?: SearchParameter<SearchTypeToken>;
	contextTypeQuantity?: SearchParameter<SearchTypeString>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsMessageHeader = {
	code?: SearchParameter<SearchTypeToken>;
	receiver?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	author?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	destination?: SearchParameter<SearchTypeString>;
	focus?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	source?: SearchParameter<SearchTypeString>;
	target?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	destinationUri?: SearchParameter<SearchTypeUri>;
	sourceUri?: SearchParameter<SearchTypeUri>;
	sender?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	responsible?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	enterer?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	responseId?: SearchParameter<SearchTypeToken>;
	event?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsMolecularSequence = {
	identifier?: SearchParameter<SearchTypeToken>;
	referenceseqidVariantCoordinate?: SearchParameter<SearchTypeString>;
	chromosome?: SearchParameter<SearchTypeToken>;
	windowEnd?: SearchParameter<SearchTypeNumber>;
	type?: SearchParameter<SearchTypeToken>;
	windowStart?: SearchParameter<SearchTypeNumber>;
	variantEnd?: SearchParameter<SearchTypeNumber>;
	chromosomeVariantCoordinate?: SearchParameter<SearchTypeString>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	variantStart?: SearchParameter<SearchTypeNumber>;
	chromosomeWindowCoordinate?: SearchParameter<SearchTypeString>;
	referenceseqidWindowCoordinate?: SearchParameter<SearchTypeString>;
	referenceseqid?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsNamingSystem = {
	date?: SearchParameter<SearchTypeDate>;
	period?: SearchParameter<SearchTypeDate>;
	contextTypeValue?: SearchParameter<SearchTypeString>;
	kind?: SearchParameter<SearchTypeToken>;
	jurisdiction?: SearchParameter<SearchTypeToken>;
	description?: SearchParameter<SearchTypeString>;
	contextType?: SearchParameter<SearchTypeToken>;
	type?: SearchParameter<SearchTypeToken>;
	idType?: SearchParameter<SearchTypeToken>;
	contextQuantity?: SearchParameter<SearchTypeQuantity>;
	responsible?: SearchParameter<SearchTypeString>;
	contact?: SearchParameter<SearchTypeString>;
	name?: SearchParameter<SearchTypeString>;
	context?: SearchParameter<SearchTypeToken>;
	publisher?: SearchParameter<SearchTypeString>;
	telecom?: SearchParameter<SearchTypeToken>;
	value?: SearchParameter<SearchTypeString>;
	contextTypeQuantity?: SearchParameter<SearchTypeString>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsNutritionOrder = {
	identifier?: SearchParameter<SearchTypeToken>;
	datetime?: SearchParameter<SearchTypeDate>;
	provider?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	supplement?: SearchParameter<SearchTypeToken>;
	formula?: SearchParameter<SearchTypeToken>;
	instantiatesCanonical?: SearchParameter<
		SearchTypeReference<R4SearchParamsTypes>
	>;
	instantiatesUri?: SearchParameter<SearchTypeUri>;
	encounter?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	oraldiet?: SearchParameter<SearchTypeToken>;
	status?: SearchParameter<SearchTypeToken>;
	additive?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsObservation = {
	date?: SearchParameter<SearchTypeDate>;
	comboDataAbsentReason?: SearchParameter<SearchTypeToken>;
	code?: SearchParameter<SearchTypeToken>;
	comboCodeValueQuantity?: SearchParameter<SearchTypeString>;
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	componentDataAbsentReason?: SearchParameter<SearchTypeToken>;
	valueConcept?: SearchParameter<SearchTypeToken>;
	valueDate?: SearchParameter<SearchTypeDate>;
	focus?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	derivedFrom?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	partOf?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	hasMember?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	codeValueString?: SearchParameter<SearchTypeString>;
	componentCodeValueQuantity?: SearchParameter<SearchTypeString>;
	basedOn?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	codeValueDate?: SearchParameter<SearchTypeString>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	specimen?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	componentCode?: SearchParameter<SearchTypeToken>;
	codeValueQuantity?: SearchParameter<SearchTypeString>;
	comboCodeValueConcept?: SearchParameter<SearchTypeString>;
	valueString?: SearchParameter<SearchTypeString>;
	identifier?: SearchParameter<SearchTypeToken>;
	performer?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	comboCode?: SearchParameter<SearchTypeToken>;
	method?: SearchParameter<SearchTypeToken>;
	valueQuantity?: SearchParameter<SearchTypeQuantity>;
	componentValueQuantity?: SearchParameter<SearchTypeQuantity>;
	dataAbsentReason?: SearchParameter<SearchTypeToken>;
	comboValueQuantity?: SearchParameter<SearchTypeQuantity>;
	encounter?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	codeValueConcept?: SearchParameter<SearchTypeString>;
	componentCodeValueConcept?: SearchParameter<SearchTypeString>;
	componentValueConcept?: SearchParameter<SearchTypeToken>;
	category?: SearchParameter<SearchTypeToken>;
	device?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	comboValueConcept?: SearchParameter<SearchTypeToken>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsObservationDefinition = {} & R4SearchParamsAll;

export type R4SearchParamsOperationDefinition = {
	date?: SearchParameter<SearchTypeDate>;
	code?: SearchParameter<SearchTypeToken>;
	instance?: SearchParameter<SearchTypeToken>;
	contextTypeValue?: SearchParameter<SearchTypeString>;
	kind?: SearchParameter<SearchTypeToken>;
	jurisdiction?: SearchParameter<SearchTypeToken>;
	description?: SearchParameter<SearchTypeString>;
	contextType?: SearchParameter<SearchTypeToken>;
	title?: SearchParameter<SearchTypeString>;
	type?: SearchParameter<SearchTypeToken>;
	version?: SearchParameter<SearchTypeToken>;
	url?: SearchParameter<SearchTypeUri>;
	contextQuantity?: SearchParameter<SearchTypeQuantity>;
	inputProfile?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	outputProfile?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	system?: SearchParameter<SearchTypeToken>;
	name?: SearchParameter<SearchTypeString>;
	context?: SearchParameter<SearchTypeToken>;
	publisher?: SearchParameter<SearchTypeString>;
	contextTypeQuantity?: SearchParameter<SearchTypeString>;
	status?: SearchParameter<SearchTypeToken>;
	base?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
} & R4SearchParamsAll;

export type R4SearchParamsOperationOutcome = {} & R4SearchParamsAll;

export type R4SearchParamsOrganization = {
	identifier?: SearchParameter<SearchTypeToken>;
	partof?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	address?: SearchParameter<SearchTypeString>;
	addressState?: SearchParameter<SearchTypeString>;
	active?: SearchParameter<SearchTypeToken>;
	type?: SearchParameter<SearchTypeToken>;
	addressPostalcode?: SearchParameter<SearchTypeString>;
	addressCountry?: SearchParameter<SearchTypeString>;
	endpoint?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	phonetic?: SearchParameter<SearchTypeString>;
	name?: SearchParameter<SearchTypeString>;
	addressUse?: SearchParameter<SearchTypeToken>;
	addressCity?: SearchParameter<SearchTypeString>;
} & R4SearchParamsAll;

export type R4SearchParamsOrganizationAffiliation = {
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	specialty?: SearchParameter<SearchTypeToken>;
	role?: SearchParameter<SearchTypeToken>;
	active?: SearchParameter<SearchTypeToken>;
	primaryOrganization?: SearchParameter<
		SearchTypeReference<R4SearchParamsTypes>
	>;
	network?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	endpoint?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	phone?: SearchParameter<SearchTypeToken>;
	service?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	participatingOrganization?: SearchParameter<
		SearchTypeReference<R4SearchParamsTypes>
	>;
	telecom?: SearchParameter<SearchTypeToken>;
	location?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	email?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsPatient = {
	identifier?: SearchParameter<SearchTypeToken>;
	given?: SearchParameter<SearchTypeString>;
	address?: SearchParameter<SearchTypeString>;
	birthdate?: SearchParameter<SearchTypeDate>;
	deceased?: SearchParameter<SearchTypeToken>;
	addressState?: SearchParameter<SearchTypeString>;
	gender?: SearchParameter<SearchTypeToken>;
	generalPractitioner?: SearchParameter<
		SearchTypeReference<R4SearchParamsTypes>
	>;
	link?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	active?: SearchParameter<SearchTypeToken>;
	language?: SearchParameter<SearchTypeToken>;
	addressPostalcode?: SearchParameter<SearchTypeString>;
	addressCountry?: SearchParameter<SearchTypeString>;
	deathDate?: SearchParameter<SearchTypeDate>;
	phonetic?: SearchParameter<SearchTypeString>;
	phone?: SearchParameter<SearchTypeToken>;
	organization?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	name?: SearchParameter<SearchTypeString>;
	addressUse?: SearchParameter<SearchTypeToken>;
	telecom?: SearchParameter<SearchTypeToken>;
	family?: SearchParameter<SearchTypeString>;
	addressCity?: SearchParameter<SearchTypeString>;
	email?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsPaymentNotice = {
	identifier?: SearchParameter<SearchTypeToken>;
	request?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	provider?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	created?: SearchParameter<SearchTypeDate>;
	response?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	paymentStatus?: SearchParameter<SearchTypeToken>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsPaymentReconciliation = {
	identifier?: SearchParameter<SearchTypeToken>;
	request?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	disposition?: SearchParameter<SearchTypeString>;
	created?: SearchParameter<SearchTypeDate>;
	paymentIssuer?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	outcome?: SearchParameter<SearchTypeToken>;
	requestor?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsParameters = {};

export type R4SearchParamsPerson = {
	identifier?: SearchParameter<SearchTypeToken>;
	address?: SearchParameter<SearchTypeString>;
	birthdate?: SearchParameter<SearchTypeDate>;
	addressState?: SearchParameter<SearchTypeString>;
	gender?: SearchParameter<SearchTypeToken>;
	practitioner?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	link?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	relatedperson?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	addressPostalcode?: SearchParameter<SearchTypeString>;
	addressCountry?: SearchParameter<SearchTypeString>;
	phonetic?: SearchParameter<SearchTypeString>;
	phone?: SearchParameter<SearchTypeToken>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	organization?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	name?: SearchParameter<SearchTypeString>;
	addressUse?: SearchParameter<SearchTypeToken>;
	telecom?: SearchParameter<SearchTypeToken>;
	addressCity?: SearchParameter<SearchTypeString>;
	email?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsPlanDefinition = {
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	successor?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	contextTypeValue?: SearchParameter<SearchTypeString>;
	jurisdiction?: SearchParameter<SearchTypeToken>;
	description?: SearchParameter<SearchTypeString>;
	derivedFrom?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	contextType?: SearchParameter<SearchTypeToken>;
	predecessor?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	title?: SearchParameter<SearchTypeString>;
	composedOf?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	type?: SearchParameter<SearchTypeToken>;
	version?: SearchParameter<SearchTypeToken>;
	url?: SearchParameter<SearchTypeUri>;
	contextQuantity?: SearchParameter<SearchTypeQuantity>;
	effective?: SearchParameter<SearchTypeDate>;
	dependsOn?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	name?: SearchParameter<SearchTypeString>;
	context?: SearchParameter<SearchTypeToken>;
	publisher?: SearchParameter<SearchTypeString>;
	topic?: SearchParameter<SearchTypeToken>;
	definition?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	contextTypeQuantity?: SearchParameter<SearchTypeString>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsPractitioner = {
	identifier?: SearchParameter<SearchTypeToken>;
	given?: SearchParameter<SearchTypeString>;
	address?: SearchParameter<SearchTypeString>;
	addressState?: SearchParameter<SearchTypeString>;
	gender?: SearchParameter<SearchTypeToken>;
	active?: SearchParameter<SearchTypeToken>;
	addressPostalcode?: SearchParameter<SearchTypeString>;
	addressCountry?: SearchParameter<SearchTypeString>;
	phonetic?: SearchParameter<SearchTypeString>;
	phone?: SearchParameter<SearchTypeToken>;
	name?: SearchParameter<SearchTypeString>;
	addressUse?: SearchParameter<SearchTypeToken>;
	telecom?: SearchParameter<SearchTypeToken>;
	family?: SearchParameter<SearchTypeString>;
	addressCity?: SearchParameter<SearchTypeString>;
	communication?: SearchParameter<SearchTypeToken>;
	email?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsPractitionerRole = {
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	specialty?: SearchParameter<SearchTypeToken>;
	role?: SearchParameter<SearchTypeToken>;
	practitioner?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	active?: SearchParameter<SearchTypeToken>;
	endpoint?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	phone?: SearchParameter<SearchTypeToken>;
	service?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	organization?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	telecom?: SearchParameter<SearchTypeToken>;
	location?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	email?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsProcedure = {
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	code?: SearchParameter<SearchTypeToken>;
	performer?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	instantiatesCanonical?: SearchParameter<
		SearchTypeReference<R4SearchParamsTypes>
	>;
	partOf?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	encounter?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	reasonCode?: SearchParameter<SearchTypeToken>;
	basedOn?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	reasonReference?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	location?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	instantiatesUri?: SearchParameter<SearchTypeUri>;
	category?: SearchParameter<SearchTypeToken>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsProvenance = {
	agentType?: SearchParameter<SearchTypeToken>;
	agent?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	signatureType?: SearchParameter<SearchTypeToken>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	location?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	recorded?: SearchParameter<SearchTypeDate>;
	agentRole?: SearchParameter<SearchTypeToken>;
	when?: SearchParameter<SearchTypeDate>;
	entity?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	target?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
} & R4SearchParamsAll;

export type R4SearchParamsQuestionnaire = {
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	code?: SearchParameter<SearchTypeToken>;
	contextTypeValue?: SearchParameter<SearchTypeString>;
	jurisdiction?: SearchParameter<SearchTypeToken>;
	description?: SearchParameter<SearchTypeString>;
	contextType?: SearchParameter<SearchTypeToken>;
	title?: SearchParameter<SearchTypeString>;
	version?: SearchParameter<SearchTypeToken>;
	url?: SearchParameter<SearchTypeUri>;
	contextQuantity?: SearchParameter<SearchTypeQuantity>;
	effective?: SearchParameter<SearchTypeDate>;
	subjectType?: SearchParameter<SearchTypeToken>;
	name?: SearchParameter<SearchTypeString>;
	context?: SearchParameter<SearchTypeToken>;
	publisher?: SearchParameter<SearchTypeString>;
	definition?: SearchParameter<SearchTypeUri>;
	contextTypeQuantity?: SearchParameter<SearchTypeString>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsQuestionnaireResponse = {
	authored?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	questionnaire?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	basedOn?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	author?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	partOf?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	encounter?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	source?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsRelatedPerson = {
	identifier?: SearchParameter<SearchTypeToken>;
	address?: SearchParameter<SearchTypeString>;
	birthdate?: SearchParameter<SearchTypeDate>;
	addressState?: SearchParameter<SearchTypeString>;
	gender?: SearchParameter<SearchTypeToken>;
	active?: SearchParameter<SearchTypeToken>;
	addressPostalcode?: SearchParameter<SearchTypeString>;
	addressCountry?: SearchParameter<SearchTypeString>;
	phonetic?: SearchParameter<SearchTypeString>;
	phone?: SearchParameter<SearchTypeToken>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	name?: SearchParameter<SearchTypeString>;
	addressUse?: SearchParameter<SearchTypeToken>;
	telecom?: SearchParameter<SearchTypeToken>;
	addressCity?: SearchParameter<SearchTypeString>;
	relationship?: SearchParameter<SearchTypeToken>;
	email?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsRequestGroup = {
	authored?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	code?: SearchParameter<SearchTypeToken>;
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	author?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	instantiatesCanonical?: SearchParameter<
		SearchTypeReference<R4SearchParamsTypes>
	>;
	encounter?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	priority?: SearchParameter<SearchTypeToken>;
	intent?: SearchParameter<SearchTypeToken>;
	participant?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	groupIdentifier?: SearchParameter<SearchTypeToken>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	instantiatesUri?: SearchParameter<SearchTypeUri>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsResearchDefinition = {
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	successor?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	contextTypeValue?: SearchParameter<SearchTypeString>;
	jurisdiction?: SearchParameter<SearchTypeToken>;
	description?: SearchParameter<SearchTypeString>;
	derivedFrom?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	contextType?: SearchParameter<SearchTypeToken>;
	predecessor?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	title?: SearchParameter<SearchTypeString>;
	composedOf?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	version?: SearchParameter<SearchTypeToken>;
	url?: SearchParameter<SearchTypeUri>;
	contextQuantity?: SearchParameter<SearchTypeQuantity>;
	effective?: SearchParameter<SearchTypeDate>;
	dependsOn?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	name?: SearchParameter<SearchTypeString>;
	context?: SearchParameter<SearchTypeToken>;
	publisher?: SearchParameter<SearchTypeString>;
	topic?: SearchParameter<SearchTypeToken>;
	contextTypeQuantity?: SearchParameter<SearchTypeString>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsResearchElementDefinition = {
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	successor?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	contextTypeValue?: SearchParameter<SearchTypeString>;
	jurisdiction?: SearchParameter<SearchTypeToken>;
	description?: SearchParameter<SearchTypeString>;
	derivedFrom?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	contextType?: SearchParameter<SearchTypeToken>;
	predecessor?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	title?: SearchParameter<SearchTypeString>;
	composedOf?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	version?: SearchParameter<SearchTypeToken>;
	url?: SearchParameter<SearchTypeUri>;
	contextQuantity?: SearchParameter<SearchTypeQuantity>;
	effective?: SearchParameter<SearchTypeDate>;
	dependsOn?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	name?: SearchParameter<SearchTypeString>;
	context?: SearchParameter<SearchTypeToken>;
	publisher?: SearchParameter<SearchTypeString>;
	topic?: SearchParameter<SearchTypeToken>;
	contextTypeQuantity?: SearchParameter<SearchTypeString>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsResearchStudy = {
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	partof?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	sponsor?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	focus?: SearchParameter<SearchTypeToken>;
	principalinvestigator?: SearchParameter<
		SearchTypeReference<R4SearchParamsTypes>
	>;
	title?: SearchParameter<SearchTypeString>;
	protocol?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	site?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	location?: SearchParameter<SearchTypeToken>;
	category?: SearchParameter<SearchTypeToken>;
	keyword?: SearchParameter<SearchTypeToken>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsResearchSubject = {
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	study?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	individual?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsRiskAssessment = {
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	condition?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	performer?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	method?: SearchParameter<SearchTypeToken>;
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	probability?: SearchParameter<SearchTypeNumber>;
	risk?: SearchParameter<SearchTypeToken>;
	encounter?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
} & R4SearchParamsAll;

export type R4SearchParamsRiskEvidenceSynthesis = {
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	contextTypeValue?: SearchParameter<SearchTypeString>;
	jurisdiction?: SearchParameter<SearchTypeToken>;
	description?: SearchParameter<SearchTypeString>;
	contextType?: SearchParameter<SearchTypeToken>;
	title?: SearchParameter<SearchTypeString>;
	version?: SearchParameter<SearchTypeToken>;
	url?: SearchParameter<SearchTypeUri>;
	contextQuantity?: SearchParameter<SearchTypeQuantity>;
	effective?: SearchParameter<SearchTypeDate>;
	name?: SearchParameter<SearchTypeString>;
	context?: SearchParameter<SearchTypeToken>;
	publisher?: SearchParameter<SearchTypeString>;
	contextTypeQuantity?: SearchParameter<SearchTypeString>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsSchedule = {
	actor?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	specialty?: SearchParameter<SearchTypeToken>;
	serviceCategory?: SearchParameter<SearchTypeToken>;
	serviceType?: SearchParameter<SearchTypeToken>;
	active?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsSearchParameter = {
	date?: SearchParameter<SearchTypeDate>;
	code?: SearchParameter<SearchTypeToken>;
	contextTypeValue?: SearchParameter<SearchTypeString>;
	jurisdiction?: SearchParameter<SearchTypeToken>;
	description?: SearchParameter<SearchTypeString>;
	derivedFrom?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	contextType?: SearchParameter<SearchTypeToken>;
	type?: SearchParameter<SearchTypeToken>;
	version?: SearchParameter<SearchTypeToken>;
	url?: SearchParameter<SearchTypeUri>;
	target?: SearchParameter<SearchTypeToken>;
	contextQuantity?: SearchParameter<SearchTypeQuantity>;
	component?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	name?: SearchParameter<SearchTypeString>;
	context?: SearchParameter<SearchTypeToken>;
	publisher?: SearchParameter<SearchTypeString>;
	contextTypeQuantity?: SearchParameter<SearchTypeString>;
	status?: SearchParameter<SearchTypeToken>;
	base?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsServiceRequest = {
	authored?: SearchParameter<SearchTypeDate>;
	requester?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	identifier?: SearchParameter<SearchTypeToken>;
	code?: SearchParameter<SearchTypeToken>;
	performer?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	requisition?: SearchParameter<SearchTypeToken>;
	replaces?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	instantiatesCanonical?: SearchParameter<
		SearchTypeReference<R4SearchParamsTypes>
	>;
	encounter?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	occurrence?: SearchParameter<SearchTypeDate>;
	priority?: SearchParameter<SearchTypeToken>;
	intent?: SearchParameter<SearchTypeToken>;
	performerType?: SearchParameter<SearchTypeToken>;
	basedOn?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	specimen?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	instantiatesUri?: SearchParameter<SearchTypeUri>;
	bodySite?: SearchParameter<SearchTypeToken>;
	category?: SearchParameter<SearchTypeToken>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsSlot = {
	schedule?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	identifier?: SearchParameter<SearchTypeToken>;
	specialty?: SearchParameter<SearchTypeToken>;
	serviceCategory?: SearchParameter<SearchTypeToken>;
	appointmentType?: SearchParameter<SearchTypeToken>;
	serviceType?: SearchParameter<SearchTypeToken>;
	start?: SearchParameter<SearchTypeDate>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsSpecimen = {
	container?: SearchParameter<SearchTypeToken>;
	identifier?: SearchParameter<SearchTypeToken>;
	parent?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	containerId?: SearchParameter<SearchTypeToken>;
	bodysite?: SearchParameter<SearchTypeToken>;
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	collected?: SearchParameter<SearchTypeDate>;
	accession?: SearchParameter<SearchTypeToken>;
	type?: SearchParameter<SearchTypeToken>;
	collector?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsSpecimenDefinition = {
	container?: SearchParameter<SearchTypeToken>;
	identifier?: SearchParameter<SearchTypeToken>;
	type?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsStructureDefinition = {
	date?: SearchParameter<SearchTypeDate>;
	contextTypeValue?: SearchParameter<SearchTypeString>;
	jurisdiction?: SearchParameter<SearchTypeToken>;
	description?: SearchParameter<SearchTypeString>;
	contextType?: SearchParameter<SearchTypeToken>;
	experimental?: SearchParameter<SearchTypeToken>;
	title?: SearchParameter<SearchTypeString>;
	type?: SearchParameter<SearchTypeUri>;
	contextQuantity?: SearchParameter<SearchTypeQuantity>;
	path?: SearchParameter<SearchTypeToken>;
	context?: SearchParameter<SearchTypeToken>;
	basePath?: SearchParameter<SearchTypeToken>;
	keyword?: SearchParameter<SearchTypeToken>;
	contextTypeQuantity?: SearchParameter<SearchTypeString>;
	identifier?: SearchParameter<SearchTypeToken>;
	valueset?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	kind?: SearchParameter<SearchTypeToken>;
	abstract?: SearchParameter<SearchTypeToken>;
	version?: SearchParameter<SearchTypeToken>;
	url?: SearchParameter<SearchTypeUri>;
	extContext?: SearchParameter<SearchTypeToken>;
	name?: SearchParameter<SearchTypeString>;
	publisher?: SearchParameter<SearchTypeString>;
	derivation?: SearchParameter<SearchTypeToken>;
	status?: SearchParameter<SearchTypeToken>;
	base?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
} & R4SearchParamsAll;

export type R4SearchParamsStructureMap = {
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	contextTypeValue?: SearchParameter<SearchTypeString>;
	jurisdiction?: SearchParameter<SearchTypeToken>;
	description?: SearchParameter<SearchTypeString>;
	contextType?: SearchParameter<SearchTypeToken>;
	title?: SearchParameter<SearchTypeString>;
	version?: SearchParameter<SearchTypeToken>;
	url?: SearchParameter<SearchTypeUri>;
	contextQuantity?: SearchParameter<SearchTypeQuantity>;
	name?: SearchParameter<SearchTypeString>;
	context?: SearchParameter<SearchTypeToken>;
	publisher?: SearchParameter<SearchTypeString>;
	contextTypeQuantity?: SearchParameter<SearchTypeString>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsSubscription = {
	payload?: SearchParameter<SearchTypeToken>;
	criteria?: SearchParameter<SearchTypeString>;
	contact?: SearchParameter<SearchTypeToken>;
	type?: SearchParameter<SearchTypeToken>;
	url?: SearchParameter<SearchTypeUri>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsSubstance = {
	identifier?: SearchParameter<SearchTypeToken>;
	containerIdentifier?: SearchParameter<SearchTypeToken>;
	code?: SearchParameter<SearchTypeToken>;
	quantity?: SearchParameter<SearchTypeQuantity>;
	substanceReference?: SearchParameter<
		SearchTypeReference<R4SearchParamsTypes>
	>;
	expiry?: SearchParameter<SearchTypeDate>;
	category?: SearchParameter<SearchTypeToken>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsSubstanceNucleicAcid = {} & R4SearchParamsAll;

export type R4SearchParamsSubstancePolymer = {} & R4SearchParamsAll;

export type R4SearchParamsSubstanceProtein = {} & R4SearchParamsAll;

export type R4SearchParamsSubstanceReferenceInformation =
	{} & R4SearchParamsAll;

export type R4SearchParamsSubstanceSourceMaterial = {} & R4SearchParamsAll;

export type R4SearchParamsSubstanceSpecification = {
	code?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsSupplyDelivery = {
	identifier?: SearchParameter<SearchTypeToken>;
	receiver?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	supplier?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsSupplyRequest = {
	requester?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	supplier?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	category?: SearchParameter<SearchTypeToken>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsTask = {
	owner?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	requester?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	identifier?: SearchParameter<SearchTypeToken>;
	businessStatus?: SearchParameter<SearchTypeToken>;
	period?: SearchParameter<SearchTypeDate>;
	code?: SearchParameter<SearchTypeToken>;
	performer?: SearchParameter<SearchTypeToken>;
	subject?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	focus?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	partOf?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	encounter?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	priority?: SearchParameter<SearchTypeToken>;
	authoredOn?: SearchParameter<SearchTypeDate>;
	intent?: SearchParameter<SearchTypeToken>;
	groupIdentifier?: SearchParameter<SearchTypeToken>;
	basedOn?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	modified?: SearchParameter<SearchTypeDate>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsTerminologyCapabilities = {
	date?: SearchParameter<SearchTypeDate>;
	contextTypeValue?: SearchParameter<SearchTypeString>;
	jurisdiction?: SearchParameter<SearchTypeToken>;
	description?: SearchParameter<SearchTypeString>;
	contextType?: SearchParameter<SearchTypeToken>;
	title?: SearchParameter<SearchTypeString>;
	version?: SearchParameter<SearchTypeToken>;
	url?: SearchParameter<SearchTypeUri>;
	contextQuantity?: SearchParameter<SearchTypeQuantity>;
	name?: SearchParameter<SearchTypeString>;
	context?: SearchParameter<SearchTypeToken>;
	publisher?: SearchParameter<SearchTypeString>;
	contextTypeQuantity?: SearchParameter<SearchTypeString>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsTestReport = {
	result?: SearchParameter<SearchTypeToken>;
	identifier?: SearchParameter<SearchTypeToken>;
	tester?: SearchParameter<SearchTypeString>;
	testscript?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	issued?: SearchParameter<SearchTypeDate>;
	participant?: SearchParameter<SearchTypeUri>;
} & R4SearchParamsAll;

export type R4SearchParamsTestScript = {
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	contextTypeValue?: SearchParameter<SearchTypeString>;
	jurisdiction?: SearchParameter<SearchTypeToken>;
	description?: SearchParameter<SearchTypeString>;
	testscriptCapability?: SearchParameter<SearchTypeString>;
	contextType?: SearchParameter<SearchTypeToken>;
	title?: SearchParameter<SearchTypeString>;
	version?: SearchParameter<SearchTypeToken>;
	url?: SearchParameter<SearchTypeUri>;
	contextQuantity?: SearchParameter<SearchTypeQuantity>;
	name?: SearchParameter<SearchTypeString>;
	context?: SearchParameter<SearchTypeToken>;
	publisher?: SearchParameter<SearchTypeString>;
	contextTypeQuantity?: SearchParameter<SearchTypeString>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsValueSet = {
	date?: SearchParameter<SearchTypeDate>;
	identifier?: SearchParameter<SearchTypeToken>;
	code?: SearchParameter<SearchTypeToken>;
	contextTypeValue?: SearchParameter<SearchTypeString>;
	jurisdiction?: SearchParameter<SearchTypeToken>;
	description?: SearchParameter<SearchTypeString>;
	contextType?: SearchParameter<SearchTypeToken>;
	title?: SearchParameter<SearchTypeString>;
	version?: SearchParameter<SearchTypeToken>;
	url?: SearchParameter<SearchTypeUri>;
	expansion?: SearchParameter<SearchTypeUri>;
	reference?: SearchParameter<SearchTypeUri>;
	contextQuantity?: SearchParameter<SearchTypeQuantity>;
	name?: SearchParameter<SearchTypeString>;
	context?: SearchParameter<SearchTypeToken>;
	publisher?: SearchParameter<SearchTypeString>;
	contextTypeQuantity?: SearchParameter<SearchTypeString>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParamsVerificationResult = {
	target?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
} & R4SearchParamsAll;

export type R4SearchParamsVisionPrescription = {
	prescriber?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	identifier?: SearchParameter<SearchTypeToken>;
	patient?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	datewritten?: SearchParameter<SearchTypeDate>;
	encounter?: SearchParameter<SearchTypeReference<R4SearchParamsTypes>>;
	status?: SearchParameter<SearchTypeToken>;
} & R4SearchParamsAll;

export type R4SearchParams = {
	Account: R4SearchParamsAccount;
	ActivityDefinition: R4SearchParamsActivityDefinition;
	AdverseEvent: R4SearchParamsAdverseEvent;
	AllergyIntolerance: R4SearchParamsAllergyIntolerance;
	Appointment: R4SearchParamsAppointment;
	AppointmentResponse: R4SearchParamsAppointmentResponse;
	AuditEvent: R4SearchParamsAuditEvent;
	Basic: R4SearchParamsBasic;
	Binary: R4SearchParamsBinary;
	BiologicallyDerivedProduct: R4SearchParamsBiologicallyDerivedProduct;
	BodyStructure: R4SearchParamsBodyStructure;
	Bundle: R4SearchParamsBundle;
	CapabilityStatement: R4SearchParamsCapabilityStatement;
	CarePlan: R4SearchParamsCarePlan;
	CareTeam: R4SearchParamsCareTeam;
	CatalogEntry: R4SearchParamsCatalogEntry;
	ChargeItem: R4SearchParamsChargeItem;
	ChargeItemDefinition: R4SearchParamsChargeItemDefinition;
	Claim: R4SearchParamsClaim;
	ClaimResponse: R4SearchParamsClaimResponse;
	ClinicalImpression: R4SearchParamsClinicalImpression;
	CodeSystem: R4SearchParamsCodeSystem;
	Communication: R4SearchParamsCommunication;
	CommunicationRequest: R4SearchParamsCommunicationRequest;
	CompartmentDefinition: R4SearchParamsCompartmentDefinition;
	Composition: R4SearchParamsComposition;
	ConceptMap: R4SearchParamsConceptMap;
	Condition: R4SearchParamsCondition;
	Consent: R4SearchParamsConsent;
	Contract: R4SearchParamsContract;
	Coverage: R4SearchParamsCoverage;
	CoverageEligibilityRequest: R4SearchParamsCoverageEligibilityRequest;
	CoverageEligibilityResponse: R4SearchParamsCoverageEligibilityResponse;
	DetectedIssue: R4SearchParamsDetectedIssue;
	Device: R4SearchParamsDevice;
	DeviceDefinition: R4SearchParamsDeviceDefinition;
	DeviceMetric: R4SearchParamsDeviceMetric;
	DeviceRequest: R4SearchParamsDeviceRequest;
	DeviceUseStatement: R4SearchParamsDeviceUseStatement;
	DiagnosticReport: R4SearchParamsDiagnosticReport;
	DocumentManifest: R4SearchParamsDocumentManifest;
	DocumentReference: R4SearchParamsDocumentReference;
	EffectEvidenceSynthesis: R4SearchParamsEffectEvidenceSynthesis;
	Encounter: R4SearchParamsEncounter;
	Endpoint: R4SearchParamsEndpoint;
	EnrollmentRequest: R4SearchParamsEnrollmentRequest;
	EnrollmentResponse: R4SearchParamsEnrollmentResponse;
	EpisodeOfCare: R4SearchParamsEpisodeOfCare;
	EventDefinition: R4SearchParamsEventDefinition;
	Evidence: R4SearchParamsEvidence;
	EvidenceVariable: R4SearchParamsEvidenceVariable;
	ExampleScenario: R4SearchParamsExampleScenario;
	ExplanationOfBenefit: R4SearchParamsExplanationOfBenefit;
	FamilyMemberHistory: R4SearchParamsFamilyMemberHistory;
	Flag: R4SearchParamsFlag;
	Goal: R4SearchParamsGoal;
	GraphDefinition: R4SearchParamsGraphDefinition;
	Group: R4SearchParamsGroup;
	GuidanceResponse: R4SearchParamsGuidanceResponse;
	HealthcareService: R4SearchParamsHealthcareService;
	ImagingStudy: R4SearchParamsImagingStudy;
	Immunization: R4SearchParamsImmunization;
	ImmunizationEvaluation: R4SearchParamsImmunizationEvaluation;
	ImmunizationRecommendation: R4SearchParamsImmunizationRecommendation;
	ImplementationGuide: R4SearchParamsImplementationGuide;
	InsurancePlan: R4SearchParamsInsurancePlan;
	Invoice: R4SearchParamsInvoice;
	Library: R4SearchParamsLibrary;
	Linkage: R4SearchParamsLinkage;
	List: R4SearchParamsList;
	Location: R4SearchParamsLocation;
	Measure: R4SearchParamsMeasure;
	MeasureReport: R4SearchParamsMeasureReport;
	Media: R4SearchParamsMedia;
	Medication: R4SearchParamsMedication;
	MedicationAdministration: R4SearchParamsMedicationAdministration;
	MedicationDispense: R4SearchParamsMedicationDispense;
	MedicationKnowledge: R4SearchParamsMedicationKnowledge;
	MedicationRequest: R4SearchParamsMedicationRequest;
	MedicationStatement: R4SearchParamsMedicationStatement;
	MedicinalProduct: R4SearchParamsMedicinalProduct;
	MedicinalProductAuthorization: R4SearchParamsMedicinalProductAuthorization;
	MedicinalProductContraindication: R4SearchParamsMedicinalProductContraindication;
	MedicinalProductIndication: R4SearchParamsMedicinalProductIndication;
	MedicinalProductIngredient: R4SearchParamsMedicinalProductIngredient;
	MedicinalProductInteraction: R4SearchParamsMedicinalProductInteraction;
	MedicinalProductManufactured: R4SearchParamsMedicinalProductManufactured;
	MedicinalProductPackaged: R4SearchParamsMedicinalProductPackaged;
	MedicinalProductPharmaceutical: R4SearchParamsMedicinalProductPharmaceutical;
	MedicinalProductUndesirableEffect: R4SearchParamsMedicinalProductUndesirableEffect;
	MessageDefinition: R4SearchParamsMessageDefinition;
	MessageHeader: R4SearchParamsMessageHeader;
	MolecularSequence: R4SearchParamsMolecularSequence;
	NamingSystem: R4SearchParamsNamingSystem;
	NutritionOrder: R4SearchParamsNutritionOrder;
	Observation: R4SearchParamsObservation;
	ObservationDefinition: R4SearchParamsObservationDefinition;
	OperationDefinition: R4SearchParamsOperationDefinition;
	OperationOutcome: R4SearchParamsOperationOutcome;
	Organization: R4SearchParamsOrganization;
	OrganizationAffiliation: R4SearchParamsOrganizationAffiliation;
	Patient: R4SearchParamsPatient;
	PaymentNotice: R4SearchParamsPaymentNotice;
	PaymentReconciliation: R4SearchParamsPaymentReconciliation;
	Person: R4SearchParamsPerson;
	Parameters: R4SearchParamsParameters;
	PlanDefinition: R4SearchParamsPlanDefinition;
	Practitioner: R4SearchParamsPractitioner;
	PractitionerRole: R4SearchParamsPractitionerRole;
	Procedure: R4SearchParamsProcedure;
	Provenance: R4SearchParamsProvenance;
	Questionnaire: R4SearchParamsQuestionnaire;
	QuestionnaireResponse: R4SearchParamsQuestionnaireResponse;
	RelatedPerson: R4SearchParamsRelatedPerson;
	RequestGroup: R4SearchParamsRequestGroup;
	ResearchDefinition: R4SearchParamsResearchDefinition;
	ResearchElementDefinition: R4SearchParamsResearchElementDefinition;
	ResearchStudy: R4SearchParamsResearchStudy;
	ResearchSubject: R4SearchParamsResearchSubject;
	RiskAssessment: R4SearchParamsRiskAssessment;
	RiskEvidenceSynthesis: R4SearchParamsRiskEvidenceSynthesis;
	Schedule: R4SearchParamsSchedule;
	SearchParameter: R4SearchParamsSearchParameter;
	ServiceRequest: R4SearchParamsServiceRequest;
	Slot: R4SearchParamsSlot;
	Specimen: R4SearchParamsSpecimen;
	SpecimenDefinition: R4SearchParamsSpecimenDefinition;
	StructureDefinition: R4SearchParamsStructureDefinition;
	StructureMap: R4SearchParamsStructureMap;
	Subscription: R4SearchParamsSubscription;
	Substance: R4SearchParamsSubstance;
	SubstanceNucleicAcid: R4SearchParamsSubstanceNucleicAcid;
	SubstancePolymer: R4SearchParamsSubstancePolymer;
	SubstanceProtein: R4SearchParamsSubstanceProtein;
	SubstanceReferenceInformation: R4SearchParamsSubstanceReferenceInformation;
	SubstanceSourceMaterial: R4SearchParamsSubstanceSourceMaterial;
	SubstanceSpecification: R4SearchParamsSubstanceSpecification;
	SupplyDelivery: R4SearchParamsSupplyDelivery;
	SupplyRequest: R4SearchParamsSupplyRequest;
	Task: R4SearchParamsTask;
	TerminologyCapabilities: R4SearchParamsTerminologyCapabilities;
	TestReport: R4SearchParamsTestReport;
	TestScript: R4SearchParamsTestScript;
	ValueSet: R4SearchParamsValueSet;
	VerificationResult: R4SearchParamsVerificationResult;
	VisionPrescription: R4SearchParamsVisionPrescription;
};
