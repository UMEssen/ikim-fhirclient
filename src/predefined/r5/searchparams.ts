// This file was autogenerated. Changes are futile!

import type {
  SearchParameter,
  SearchTypeDate,
  SearchTypeNumber,
  SearchTypeQuantity,
  SearchTypeReference,
  SearchTypeString,
  SearchTypeToken,
  SearchTypeUri,
} from "@";

type R5SearchParamsTypes =
  | "Account"
  | "ActivityDefinition"
  | "ActorDefinition"
  | "AdministrableProductDefinition"
  | "AdverseEvent"
  | "AllergyIntolerance"
  | "Appointment"
  | "AppointmentResponse"
  | "ArtifactAssessment"
  | "AuditEvent"
  | "Basic"
  | "Binary"
  | "BiologicallyDerivedProduct"
  | "BiologicallyDerivedProductDispense"
  | "BodyStructure"
  | "Bundle"
  | "CapabilityStatement"
  | "CarePlan"
  | "CareTeam"
  | "ChargeItem"
  | "ChargeItemDefinition"
  | "Citation"
  | "Claim"
  | "ClaimResponse"
  | "ClinicalImpression"
  | "ClinicalUseDefinition"
  | "CodeSystem"
  | "Communication"
  | "CommunicationRequest"
  | "CompartmentDefinition"
  | "Composition"
  | "ConceptMap"
  | "Condition"
  | "ConditionDefinition"
  | "Consent"
  | "Contract"
  | "Coverage"
  | "CoverageEligibilityRequest"
  | "CoverageEligibilityResponse"
  | "DetectedIssue"
  | "Device"
  | "DeviceAssociation"
  | "DeviceDefinition"
  | "DeviceDispense"
  | "DeviceMetric"
  | "DeviceRequest"
  | "DeviceUsage"
  | "DiagnosticReport"
  | "DocumentReference"
  | "Encounter"
  | "EncounterHistory"
  | "Endpoint"
  | "EnrollmentRequest"
  | "EnrollmentResponse"
  | "EpisodeOfCare"
  | "EventDefinition"
  | "Evidence"
  | "EvidenceReport"
  | "EvidenceVariable"
  | "ExampleScenario"
  | "ExplanationOfBenefit"
  | "FamilyMemberHistory"
  | "Flag"
  | "FormularyItem"
  | "GenomicStudy"
  | "Goal"
  | "GraphDefinition"
  | "Group"
  | "GuidanceResponse"
  | "HealthcareService"
  | "ImagingSelection"
  | "ImagingStudy"
  | "Immunization"
  | "ImmunizationEvaluation"
  | "ImmunizationRecommendation"
  | "ImplementationGuide"
  | "Ingredient"
  | "InsurancePlan"
  | "InventoryItem"
  | "InventoryReport"
  | "Invoice"
  | "Library"
  | "Linkage"
  | "List"
  | "Location"
  | "ManufacturedItemDefinition"
  | "Measure"
  | "MeasureReport"
  | "Medication"
  | "MedicationAdministration"
  | "MedicationDispense"
  | "MedicationKnowledge"
  | "MedicationRequest"
  | "MedicationStatement"
  | "MedicinalProductDefinition"
  | "MessageDefinition"
  | "MessageHeader"
  | "MolecularSequence"
  | "NamingSystem"
  | "NutritionIntake"
  | "NutritionOrder"
  | "NutritionProduct"
  | "Observation"
  | "ObservationDefinition"
  | "OperationDefinition"
  | "OperationOutcome"
  | "Organization"
  | "OrganizationAffiliation"
  | "PackagedProductDefinition"
  | "Patient"
  | "PaymentNotice"
  | "PaymentReconciliation"
  | "Permission"
  | "Person"
  | "PlanDefinition"
  | "Practitioner"
  | "PractitionerRole"
  | "Procedure"
  | "Provenance"
  | "Questionnaire"
  | "QuestionnaireResponse"
  | "RegulatedAuthorization"
  | "RelatedPerson"
  | "RequestOrchestration"
  | "Requirements"
  | "ResearchStudy"
  | "ResearchSubject"
  | "RiskAssessment"
  | "Schedule"
  | "SearchParameter"
  | "ServiceRequest"
  | "Slot"
  | "Specimen"
  | "SpecimenDefinition"
  | "StructureDefinition"
  | "StructureMap"
  | "Subscription"
  | "SubscriptionStatus"
  | "SubscriptionTopic"
  | "Substance"
  | "SubstanceDefinition"
  | "SubstanceNucleicAcid"
  | "SubstancePolymer"
  | "SubstanceProtein"
  | "SubstanceReferenceInformation"
  | "SubstanceSourceMaterial"
  | "SupplyDelivery"
  | "SupplyRequest"
  | "Task"
  | "TerminologyCapabilities"
  | "TestPlan"
  | "TestReport"
  | "TestScript"
  | "Transport"
  | "ValueSet"
  | "VerificationResult"
  | "VisionPrescription";

export type R5SearchParamsAll = {
  _text?: SearchParameter<SearchTypeString>;
  _id?: SearchParameter<SearchTypeString>;
  _list?: SearchParameter<SearchTypeToken>;
  _has?: SearchParameter<SearchTypeString>;
  _type?: SearchParameter<SearchTypeToken>;
  _sort?: SearchParameter<SearchTypeToken>;
  _count?: SearchParameter<SearchTypeNumber>;
  _include?: SearchParameter<SearchTypeToken>;
  _revinclude?: SearchParameter<SearchTypeToken>;
  _summary?: SearchParameter<SearchTypeToken>;
  _elements?: SearchParameter<SearchTypeString>;
  _contained?: SearchParameter<SearchTypeToken>;
  _containedType?: SearchParameter<SearchTypeToken>;
  _language?: SearchParameter<SearchTypeToken>;
  _query?: SearchParameter<SearchTypeString>;
  _in?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  _lastUpdated?: SearchParameter<SearchTypeDate>;
  _security?: SearchParameter<SearchTypeToken>;
  _filter?: SearchParameter<SearchTypeString>;
  _profile?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  _tag?: SearchParameter<SearchTypeToken>;
  _source?: SearchParameter<SearchTypeUri>;
  _content?: SearchParameter<SearchTypeString>;
};

export type R5SearchParamsAccount = {
  owner?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  identifier?: SearchParameter<SearchTypeToken>;
  period?: SearchParameter<SearchTypeDate>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  name?: SearchParameter<SearchTypeString>;
  guarantor?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  type?: SearchParameter<SearchTypeToken>;
  relatedaccount?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsActivityDefinition = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  successor?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  kind?: SearchParameter<SearchTypeToken>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  derivedFrom?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  predecessor?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  composedOf?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  title?: SearchParameter<SearchTypeString>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  dependsOn?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  effective?: SearchParameter<SearchTypeDate>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  topic?: SearchParameter<SearchTypeToken>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsActorDefinition = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  title?: SearchParameter<SearchTypeString>;
  type?: SearchParameter<SearchTypeToken>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  context?: SearchParameter<SearchTypeToken>;
  publisher?: SearchParameter<SearchTypeString>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsAdministrableProductDefinition = {
  identifier?: SearchParameter<SearchTypeToken>;
  manufacturedItem?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  ingredient?: SearchParameter<SearchTypeToken>;
  route?: SearchParameter<SearchTypeToken>;
  doseForm?: SearchParameter<SearchTypeToken>;
  device?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  formOf?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  targetSpecies?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsAdverseEvent = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  recorder?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  study?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  code?: SearchParameter<SearchTypeToken>;
  actuality?: SearchParameter<SearchTypeToken>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  substance?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  resultingeffect?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  seriousness?: SearchParameter<SearchTypeToken>;
  location?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  category?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsAllergyIntolerance = {
  date?: SearchParameter<SearchTypeDate>;
  severity?: SearchParameter<SearchTypeToken>;
  identifier?: SearchParameter<SearchTypeToken>;
  code?: SearchParameter<SearchTypeToken>;
  verificationStatus?: SearchParameter<SearchTypeToken>;
  criticality?: SearchParameter<SearchTypeToken>;
  manifestationReference?: SearchParameter<
    SearchTypeReference<R5SearchParamsTypes>
  >;
  clinicalStatus?: SearchParameter<SearchTypeToken>;
  type?: SearchParameter<SearchTypeToken>;
  participant?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  manifestationCode?: SearchParameter<SearchTypeToken>;
  route?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  category?: SearchParameter<SearchTypeToken>;
  lastDate?: SearchParameter<SearchTypeDate>;
} & R5SearchParamsAll;

export type R5SearchParamsAppointment = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  specialty?: SearchParameter<SearchTypeToken>;
  serviceCategory?: SearchParameter<SearchTypeToken>;
  practitioner?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  appointmentType?: SearchParameter<SearchTypeToken>;
  partStatus?: SearchParameter<SearchTypeToken>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  serviceType?: SearchParameter<SearchTypeToken>;
  slot?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  reasonCode?: SearchParameter<SearchTypeToken>;
  actor?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  basedOn?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  reasonReference?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  supportingInfo?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  requestedPeriod?: SearchParameter<SearchTypeDate>;
  location?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  group?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  serviceTypeReference?: SearchParameter<
    SearchTypeReference<R5SearchParamsTypes>
  >;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsAppointmentResponse = {
  actor?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  identifier?: SearchParameter<SearchTypeToken>;
  practitioner?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  partStatus?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  appointment?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  location?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  group?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
} & R5SearchParamsAll;

export type R5SearchParamsArtifactAssessment = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsAuditEvent = {
  date?: SearchParameter<SearchTypeDate>;
  agent?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  entityRole?: SearchParameter<SearchTypeToken>;
  code?: SearchParameter<SearchTypeToken>;
  purpose?: SearchParameter<SearchTypeToken>;
  encounter?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  source?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  basedOn?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  action?: SearchParameter<SearchTypeToken>;
  agentRole?: SearchParameter<SearchTypeToken>;
  category?: SearchParameter<SearchTypeToken>;
  entity?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  outcome?: SearchParameter<SearchTypeToken>;
  policy?: SearchParameter<SearchTypeUri>;
} & R5SearchParamsAll;

export type R5SearchParamsBasic = {
  identifier?: SearchParameter<SearchTypeToken>;
  code?: SearchParameter<SearchTypeToken>;
  author?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  created?: SearchParameter<SearchTypeDate>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
} & R5SearchParamsAll;

export type R5SearchParamsBinary = {} & R5SearchParamsAll;

export type R5SearchParamsBiologicallyDerivedProduct = {
  identifier?: SearchParameter<SearchTypeToken>;
  request?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  code?: SearchParameter<SearchTypeToken>;
  productStatus?: SearchParameter<SearchTypeToken>;
  serialNumber?: SearchParameter<SearchTypeToken>;
  biologicalSourceEvent?: SearchParameter<SearchTypeToken>;
  productCategory?: SearchParameter<SearchTypeToken>;
  collector?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
} & R5SearchParamsAll;

export type R5SearchParamsBiologicallyDerivedProductDispense = {
  identifier?: SearchParameter<SearchTypeToken>;
  product?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  performer?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsBodyStructure = {
  identifier?: SearchParameter<SearchTypeToken>;
  included_structure?: SearchParameter<SearchTypeToken>;
  excluded_structure?: SearchParameter<SearchTypeToken>;
  morphology?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
} & R5SearchParamsAll;

export type R5SearchParamsBundle = {
  identifier?: SearchParameter<SearchTypeToken>;
  composition?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  message?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  type?: SearchParameter<SearchTypeToken>;
  timestamp?: SearchParameter<SearchTypeDate>;
} & R5SearchParamsAll;

export type R5SearchParamsCapabilityStatement = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  resourceProfile?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  software?: SearchParameter<SearchTypeString>;
  resource?: SearchParameter<SearchTypeToken>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  format?: SearchParameter<SearchTypeToken>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  fhirversion?: SearchParameter<SearchTypeToken>;
  title?: SearchParameter<SearchTypeString>;
  version?: SearchParameter<SearchTypeToken>;
  supportedProfile?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  url?: SearchParameter<SearchTypeUri>;
  mode?: SearchParameter<SearchTypeToken>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  securityService?: SearchParameter<SearchTypeToken>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  guide?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsCarePlan = {
  careTeam?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  goal?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  custodian?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  replaces?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  instantiatesCanonical?: SearchParameter<
    SearchTypeReference<R5SearchParamsTypes>
  >;
  partOf?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  encounter?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  intent?: SearchParameter<SearchTypeToken>;
  activityReference?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  condition?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  basedOn?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  instantiatesUri?: SearchParameter<SearchTypeUri>;
  category?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsCareTeam = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  name?: SearchParameter<SearchTypeString>;
  category?: SearchParameter<SearchTypeToken>;
  participant?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsChargeItem = {
  identifier?: SearchParameter<SearchTypeToken>;
  performingOrganization?: SearchParameter<
    SearchTypeReference<R5SearchParamsTypes>
  >;
  code?: SearchParameter<SearchTypeToken>;
  quantity?: SearchParameter<SearchTypeQuantity>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  encounter?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  occurrence?: SearchParameter<SearchTypeDate>;
  enteredDate?: SearchParameter<SearchTypeDate>;
  performerFunction?: SearchParameter<SearchTypeToken>;
  factorOverride?: SearchParameter<SearchTypeNumber>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  service?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  priceOverride?: SearchParameter<SearchTypeQuantity>;
  enterer?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  performerActor?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  account?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  requestingOrganization?: SearchParameter<
    SearchTypeReference<R5SearchParamsTypes>
  >;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsChargeItemDefinition = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  title?: SearchParameter<SearchTypeString>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  effective?: SearchParameter<SearchTypeDate>;
  context?: SearchParameter<SearchTypeToken>;
  publisher?: SearchParameter<SearchTypeString>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsCitation = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  description?: SearchParameter<SearchTypeString>;
  classificationType?: SearchParameter<SearchTypeToken>;
  contextType?: SearchParameter<SearchTypeToken>;
  title?: SearchParameter<SearchTypeString>;
  classification?: SearchParameter<SearchTypeString>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  effective?: SearchParameter<SearchTypeDate>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  classifier?: SearchParameter<SearchTypeToken>;
  publisher?: SearchParameter<SearchTypeString>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsClaim = {
  careTeam?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  identifier?: SearchParameter<SearchTypeToken>;
  created?: SearchParameter<SearchTypeDate>;
  use?: SearchParameter<SearchTypeToken>;
  encounter?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  priority?: SearchParameter<SearchTypeToken>;
  payee?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  provider?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  insurer?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  detailUdi?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  enterer?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  procedureUdi?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  subdetailUdi?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  facility?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  itemUdi?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsClaimResponse = {
  identifier?: SearchParameter<SearchTypeToken>;
  request?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  disposition?: SearchParameter<SearchTypeString>;
  created?: SearchParameter<SearchTypeDate>;
  insurer?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  use?: SearchParameter<SearchTypeToken>;
  paymentDate?: SearchParameter<SearchTypeDate>;
  outcome?: SearchParameter<SearchTypeToken>;
  requestor?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsClinicalImpression = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  performer?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  problem?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  previous?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  findingCode?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  supportingInfo?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  encounter?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  findingRef?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsClinicalUseDefinition = {
  contraindicationReference?: SearchParameter<
    SearchTypeReference<R5SearchParamsTypes>
  >;
  identifier?: SearchParameter<SearchTypeToken>;
  indicationReference?: SearchParameter<
    SearchTypeReference<R5SearchParamsTypes>
  >;
  product?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  effect?: SearchParameter<SearchTypeToken>;
  interaction?: SearchParameter<SearchTypeToken>;
  indication?: SearchParameter<SearchTypeToken>;
  type?: SearchParameter<SearchTypeToken>;
  contraindication?: SearchParameter<SearchTypeToken>;
  effectReference?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsCodeSystem = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  code?: SearchParameter<SearchTypeToken>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  contentMode?: SearchParameter<SearchTypeToken>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  description?: SearchParameter<SearchTypeString>;
  derivedFrom?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  contextType?: SearchParameter<SearchTypeToken>;
  language?: SearchParameter<SearchTypeToken>;
  predecessor?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  title?: SearchParameter<SearchTypeString>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  supplements?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  effective?: SearchParameter<SearchTypeDate>;
  system?: SearchParameter<SearchTypeUri>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  topic?: SearchParameter<SearchTypeToken>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsCommunication = {
  identifier?: SearchParameter<SearchTypeToken>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  instantiatesCanonical?: SearchParameter<
    SearchTypeReference<R5SearchParamsTypes>
  >;
  partOf?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  received?: SearchParameter<SearchTypeDate>;
  encounter?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  medium?: SearchParameter<SearchTypeToken>;
  sent?: SearchParameter<SearchTypeDate>;
  basedOn?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  sender?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  recipient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  topic?: SearchParameter<SearchTypeToken>;
  instantiatesUri?: SearchParameter<SearchTypeUri>;
  category?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsCommunicationRequest = {
  authored?: SearchParameter<SearchTypeDate>;
  requester?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  identifier?: SearchParameter<SearchTypeToken>;
  replaces?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  encounter?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  medium?: SearchParameter<SearchTypeToken>;
  occurrence?: SearchParameter<SearchTypeDate>;
  priority?: SearchParameter<SearchTypeToken>;
  groupIdentifier?: SearchParameter<SearchTypeToken>;
  basedOn?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  recipient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  informationProvider?: SearchParameter<
    SearchTypeReference<R5SearchParamsTypes>
  >;
  category?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsCompartmentDefinition = {
  date?: SearchParameter<SearchTypeDate>;
  code?: SearchParameter<SearchTypeToken>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  resource?: SearchParameter<SearchTypeToken>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsComposition = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  period?: SearchParameter<SearchTypeDate>;
  eventCode?: SearchParameter<SearchTypeToken>;
  author?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  section?: SearchParameter<SearchTypeToken>;
  encounter?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  title?: SearchParameter<SearchTypeString>;
  type?: SearchParameter<SearchTypeToken>;
  version?: SearchParameter<SearchTypeToken>;
  attester?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  url?: SearchParameter<SearchTypeUri>;
  eventReference?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  sectionText?: SearchParameter<SearchTypeString>;
  entry?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  related?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  category?: SearchParameter<SearchTypeToken>;
  sectionCodeText?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsConceptMap = {
  date?: SearchParameter<SearchTypeDate>;
  targetScope?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  description?: SearchParameter<SearchTypeString>;
  targetGroupSystem?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  derivedFrom?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  contextType?: SearchParameter<SearchTypeToken>;
  predecessor?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  title?: SearchParameter<SearchTypeString>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  effective?: SearchParameter<SearchTypeDate>;
  sourceScope?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  context?: SearchParameter<SearchTypeToken>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  targetCode?: SearchParameter<SearchTypeToken>;
  identifier?: SearchParameter<SearchTypeToken>;
  sourceScopeUri?: SearchParameter<SearchTypeUri>;
  sourceGroupSystem?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  mappingProperty?: SearchParameter<SearchTypeUri>;
  otherMap?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  sourceCode?: SearchParameter<SearchTypeToken>;
  targetScopeUri?: SearchParameter<SearchTypeUri>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  topic?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsCondition = {
  evidenceDetail?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  severity?: SearchParameter<SearchTypeToken>;
  identifier?: SearchParameter<SearchTypeToken>;
  onsetInfo?: SearchParameter<SearchTypeString>;
  recordedDate?: SearchParameter<SearchTypeDate>;
  code?: SearchParameter<SearchTypeToken>;
  evidence?: SearchParameter<SearchTypeToken>;
  participantFunction?: SearchParameter<SearchTypeToken>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  participantActor?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  verificationStatus?: SearchParameter<SearchTypeToken>;
  clinicalStatus?: SearchParameter<SearchTypeToken>;
  encounter?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  onsetDate?: SearchParameter<SearchTypeDate>;
  abatementDate?: SearchParameter<SearchTypeDate>;
  stage?: SearchParameter<SearchTypeToken>;
  abatementString?: SearchParameter<SearchTypeString>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  abatementAge?: SearchParameter<SearchTypeQuantity>;
  onsetAge?: SearchParameter<SearchTypeQuantity>;
  bodySite?: SearchParameter<SearchTypeToken>;
  category?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsConditionDefinition = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  title?: SearchParameter<SearchTypeString>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsConsent = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  controller?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  period?: SearchParameter<SearchTypeDate>;
  data?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  manager?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  purpose?: SearchParameter<SearchTypeToken>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  verifiedDate?: SearchParameter<SearchTypeDate>;
  grantee?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  sourceReference?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  verified?: SearchParameter<SearchTypeToken>;
  actor?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  securityLabel?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  action?: SearchParameter<SearchTypeToken>;
  category?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsContract = {
  identifier?: SearchParameter<SearchTypeToken>;
  instantiates?: SearchParameter<SearchTypeUri>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  authority?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  domain?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  issued?: SearchParameter<SearchTypeDate>;
  url?: SearchParameter<SearchTypeUri>;
  signer?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsCoverage = {
  identifier?: SearchParameter<SearchTypeToken>;
  subscriber?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  subscriberid?: SearchParameter<SearchTypeToken>;
  type?: SearchParameter<SearchTypeToken>;
  beneficiary?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  insurer?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  classValue?: SearchParameter<SearchTypeToken>;
  paymentbyParty?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  classType?: SearchParameter<SearchTypeToken>;
  dependent?: SearchParameter<SearchTypeString>;
  policyHolder?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsCoverageEligibilityRequest = {
  identifier?: SearchParameter<SearchTypeToken>;
  provider?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  created?: SearchParameter<SearchTypeDate>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  enterer?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  facility?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsCoverageEligibilityResponse = {
  identifier?: SearchParameter<SearchTypeToken>;
  request?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  disposition?: SearchParameter<SearchTypeString>;
  created?: SearchParameter<SearchTypeDate>;
  insurer?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  outcome?: SearchParameter<SearchTypeToken>;
  requestor?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsDetectedIssue = {
  identifier?: SearchParameter<SearchTypeToken>;
  code?: SearchParameter<SearchTypeToken>;
  identified?: SearchParameter<SearchTypeDate>;
  author?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  implicated?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  category?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsDevice = {
  udiDi?: SearchParameter<SearchTypeString>;
  identifier?: SearchParameter<SearchTypeToken>;
  parent?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  manufactureDate?: SearchParameter<SearchTypeDate>;
  udiCarrier?: SearchParameter<SearchTypeString>;
  code?: SearchParameter<SearchTypeToken>;
  deviceName?: SearchParameter<SearchTypeString>;
  lotNumber?: SearchParameter<SearchTypeString>;
  serialNumber?: SearchParameter<SearchTypeString>;
  specification?: SearchParameter<SearchTypeToken>;
  type?: SearchParameter<SearchTypeToken>;
  version?: SearchParameter<SearchTypeString>;
  url?: SearchParameter<SearchTypeUri>;
  manufacturer?: SearchParameter<SearchTypeString>;
  codeValueConcept?: SearchParameter<SearchTypeString>;
  organization?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  biologicalSourceEvent?: SearchParameter<SearchTypeToken>;
  definition?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  location?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  model?: SearchParameter<SearchTypeString>;
  expirationDate?: SearchParameter<SearchTypeDate>;
  specificationVersion?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsDeviceAssociation = {
  identifier?: SearchParameter<SearchTypeToken>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  device?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  operator?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsDeviceDefinition = {
  identifier?: SearchParameter<SearchTypeToken>;
  deviceName?: SearchParameter<SearchTypeString>;
  organization?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  specification?: SearchParameter<SearchTypeToken>;
  type?: SearchParameter<SearchTypeToken>;
  specificationVersion?: SearchParameter<SearchTypeString>;
  manufacturer?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
} & R5SearchParamsAll;

export type R5SearchParamsDeviceDispense = {
  identifier?: SearchParameter<SearchTypeToken>;
  code?: SearchParameter<SearchTypeToken>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsDeviceMetric = {
  identifier?: SearchParameter<SearchTypeToken>;
  category?: SearchParameter<SearchTypeToken>;
  type?: SearchParameter<SearchTypeToken>;
  device?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
} & R5SearchParamsAll;

export type R5SearchParamsDeviceRequest = {
  insurance?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  performerCode?: SearchParameter<SearchTypeToken>;
  requester?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  identifier?: SearchParameter<SearchTypeToken>;
  code?: SearchParameter<SearchTypeToken>;
  performer?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  eventDate?: SearchParameter<SearchTypeDate>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  instantiatesCanonical?: SearchParameter<
    SearchTypeReference<R5SearchParamsTypes>
  >;
  encounter?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  authoredOn?: SearchParameter<SearchTypeDate>;
  intent?: SearchParameter<SearchTypeToken>;
  groupIdentifier?: SearchParameter<SearchTypeToken>;
  basedOn?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  instantiatesUri?: SearchParameter<SearchTypeUri>;
  device?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  priorRequest?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsDeviceUsage = {
  identifier?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  device?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsDiagnosticReport = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  study?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  code?: SearchParameter<SearchTypeToken>;
  performer?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  encounter?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  media?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  conclusion?: SearchParameter<SearchTypeToken>;
  result?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  basedOn?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  specimen?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  category?: SearchParameter<SearchTypeToken>;
  issued?: SearchParameter<SearchTypeDate>;
  resultsInterpreter?: SearchParameter<
    SearchTypeReference<R5SearchParamsTypes>
  >;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsDocumentReference = {
  date?: SearchParameter<SearchTypeDate>;
  modality?: SearchParameter<SearchTypeToken>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  description?: SearchParameter<SearchTypeString>;
  language?: SearchParameter<SearchTypeToken>;
  type?: SearchParameter<SearchTypeToken>;
  relation?: SearchParameter<SearchTypeToken>;
  setting?: SearchParameter<SearchTypeToken>;
  docStatus?: SearchParameter<SearchTypeToken>;
  basedOn?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  formatCanonical?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  context?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  relationship?: SearchParameter<SearchTypeString>;
  creation?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  period?: SearchParameter<SearchTypeDate>;
  eventCode?: SearchParameter<SearchTypeToken>;
  bodysite?: SearchParameter<SearchTypeToken>;
  custodian?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  author?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  formatCode?: SearchParameter<SearchTypeToken>;
  bodysiteReference?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  formatUri?: SearchParameter<SearchTypeUri>;
  version?: SearchParameter<SearchTypeString>;
  attester?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  contenttype?: SearchParameter<SearchTypeToken>;
  eventReference?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  securityLabel?: SearchParameter<SearchTypeToken>;
  location?: SearchParameter<SearchTypeUri>;
  category?: SearchParameter<SearchTypeToken>;
  relatesto?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  facility?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsEncounter = {
  date?: SearchParameter<SearchTypeDate>;
  participantType?: SearchParameter<SearchTypeToken>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  subjectStatus?: SearchParameter<SearchTypeToken>;
  appointment?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  partOf?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  type?: SearchParameter<SearchTypeToken>;
  participant?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  reasonCode?: SearchParameter<SearchTypeToken>;
  basedOn?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  dateStart?: SearchParameter<SearchTypeDate>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  locationPeriod?: SearchParameter<SearchTypeString>;
  specialArrangement?: SearchParameter<SearchTypeToken>;
  class?: SearchParameter<SearchTypeToken>;
  identifier?: SearchParameter<SearchTypeToken>;
  diagnosisCode?: SearchParameter<SearchTypeToken>;
  practitioner?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  episodeOfCare?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  length?: SearchParameter<SearchTypeQuantity>;
  careteam?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  endDate?: SearchParameter<SearchTypeDate>;
  diagnosisReference?: SearchParameter<
    SearchTypeReference<R5SearchParamsTypes>
  >;
  reasonReference?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  location?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  serviceProvider?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  account?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsEncounterHistory = {
  identifier?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  encounter?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsEndpoint = {
  payloadType?: SearchParameter<SearchTypeToken>;
  identifier?: SearchParameter<SearchTypeToken>;
  connectionType?: SearchParameter<SearchTypeToken>;
  organization?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  name?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsEnrollmentRequest = {
  identifier?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsEnrollmentResponse = {
  identifier?: SearchParameter<SearchTypeToken>;
  request?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsEpisodeOfCare = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  diagnosisCode?: SearchParameter<SearchTypeToken>;
  diagnosisReference?: SearchParameter<
    SearchTypeReference<R5SearchParamsTypes>
  >;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  organization?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  reasonReference?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  type?: SearchParameter<SearchTypeToken>;
  careManager?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  reasonCode?: SearchParameter<SearchTypeToken>;
  incomingReferral?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsEventDefinition = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  successor?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  derivedFrom?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  predecessor?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  composedOf?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  title?: SearchParameter<SearchTypeString>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  dependsOn?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  effective?: SearchParameter<SearchTypeDate>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  topic?: SearchParameter<SearchTypeToken>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsEvidence = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  title?: SearchParameter<SearchTypeString>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  context?: SearchParameter<SearchTypeToken>;
  publisher?: SearchParameter<SearchTypeString>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsEvidenceReport = {
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  identifier?: SearchParameter<SearchTypeToken>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  context?: SearchParameter<SearchTypeToken>;
  publisher?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  url?: SearchParameter<SearchTypeUri>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsEvidenceVariable = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  successor?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  derivedFrom?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  predecessor?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  composedOf?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  title?: SearchParameter<SearchTypeString>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  dependsOn?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  topic?: SearchParameter<SearchTypeToken>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsExampleScenario = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  contextType?: SearchParameter<SearchTypeToken>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsExplanationOfBenefit = {
  careTeam?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  coverage?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  identifier?: SearchParameter<SearchTypeToken>;
  created?: SearchParameter<SearchTypeDate>;
  encounter?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  payee?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  disposition?: SearchParameter<SearchTypeString>;
  provider?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  detailUdi?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  claim?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  enterer?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  procedureUdi?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  subdetailUdi?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  facility?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  itemUdi?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsFamilyMemberHistory = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  code?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  sex?: SearchParameter<SearchTypeToken>;
  instantiatesCanonical?: SearchParameter<
    SearchTypeReference<R5SearchParamsTypes>
  >;
  instantiatesUri?: SearchParameter<SearchTypeUri>;
  relationship?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsFlag = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  author?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  encounter?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  category?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsFormularyItem = {
  identifier?: SearchParameter<SearchTypeToken>;
  code?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsGenomicStudy = {
  identifier?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  focus?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsGoal = {
  targetMeasure?: SearchParameter<SearchTypeToken>;
  identifier?: SearchParameter<SearchTypeToken>;
  addresses?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  lifecycleStatus?: SearchParameter<SearchTypeToken>;
  achievementStatus?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  description?: SearchParameter<SearchTypeToken>;
  startDate?: SearchParameter<SearchTypeDate>;
  category?: SearchParameter<SearchTypeToken>;
  targetDate?: SearchParameter<SearchTypeDate>;
} & R5SearchParamsAll;

export type R5SearchParamsGraphDefinition = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  start?: SearchParameter<SearchTypeToken>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsGroup = {
  identifier?: SearchParameter<SearchTypeToken>;
  characteristicValue?: SearchParameter<SearchTypeString>;
  managingEntity?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  code?: SearchParameter<SearchTypeToken>;
  member?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  name?: SearchParameter<SearchTypeString>;
  exclude?: SearchParameter<SearchTypeToken>;
  membership?: SearchParameter<SearchTypeToken>;
  type?: SearchParameter<SearchTypeToken>;
  characteristicReference?: SearchParameter<
    SearchTypeReference<R5SearchParamsTypes>
  >;
  value?: SearchParameter<SearchTypeToken>;
  characteristic?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsGuidanceResponse = {
  identifier?: SearchParameter<SearchTypeToken>;
  request?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsHealthcareService = {
  identifier?: SearchParameter<SearchTypeToken>;
  specialty?: SearchParameter<SearchTypeToken>;
  serviceCategory?: SearchParameter<SearchTypeToken>;
  serviceType?: SearchParameter<SearchTypeToken>;
  active?: SearchParameter<SearchTypeToken>;
  eligibility?: SearchParameter<SearchTypeToken>;
  program?: SearchParameter<SearchTypeToken>;
  characteristic?: SearchParameter<SearchTypeToken>;
  endpoint?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  coverageArea?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  organization?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  offeredIn?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  name?: SearchParameter<SearchTypeString>;
  location?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  communication?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsImagingSelection = {
  identifier?: SearchParameter<SearchTypeToken>;
  bodyStructure?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  basedOn?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  code?: SearchParameter<SearchTypeToken>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  derivedFrom?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  issued?: SearchParameter<SearchTypeDate>;
  bodySite?: SearchParameter<SearchTypeToken>;
  studyUid?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsImagingStudy = {
  identifier?: SearchParameter<SearchTypeToken>;
  reason?: SearchParameter<SearchTypeToken>;
  dicomClass?: SearchParameter<SearchTypeToken>;
  instance?: SearchParameter<SearchTypeToken>;
  modality?: SearchParameter<SearchTypeToken>;
  performer?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  started?: SearchParameter<SearchTypeDate>;
  encounter?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  referrer?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  bodyStructure?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  endpoint?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  basedOn?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  series?: SearchParameter<SearchTypeToken>;
  bodySite?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsImmunization = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  performer?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  reaction?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  lotNumber?: SearchParameter<SearchTypeString>;
  statusReason?: SearchParameter<SearchTypeToken>;
  reasonCode?: SearchParameter<SearchTypeToken>;
  manufacturer?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  targetDisease?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  series?: SearchParameter<SearchTypeString>;
  vaccineCode?: SearchParameter<SearchTypeToken>;
  reasonReference?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  location?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  reactionDate?: SearchParameter<SearchTypeDate>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsImmunizationEvaluation = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  targetDisease?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  doseStatus?: SearchParameter<SearchTypeToken>;
  immunizationEvent?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsImmunizationRecommendation = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  targetDisease?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  vaccineType?: SearchParameter<SearchTypeToken>;
  information?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  support?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsImplementationGuide = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  resource?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  experimental?: SearchParameter<SearchTypeToken>;
  global?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  title?: SearchParameter<SearchTypeString>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  dependsOn?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsIngredient = {
  identifier?: SearchParameter<SearchTypeToken>;
  role?: SearchParameter<SearchTypeToken>;
  substance?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  strengthConcentrationRatio?: SearchParameter<SearchTypeString>;
  for?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  substanceCode?: SearchParameter<SearchTypeToken>;
  strengthConcentrationQuantity?: SearchParameter<SearchTypeQuantity>;
  manufacturer?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  substanceDefinition?: SearchParameter<
    SearchTypeReference<R5SearchParamsTypes>
  >;
  function?: SearchParameter<SearchTypeToken>;
  strengthPresentationRatio?: SearchParameter<SearchTypeString>;
  strengthPresentationQuantity?: SearchParameter<SearchTypeQuantity>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsInsurancePlan = {
  identifier?: SearchParameter<SearchTypeToken>;
  address?: SearchParameter<SearchTypeString>;
  addressState?: SearchParameter<SearchTypeString>;
  ownedBy?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  type?: SearchParameter<SearchTypeToken>;
  addressPostalcode?: SearchParameter<SearchTypeString>;
  addressCountry?: SearchParameter<SearchTypeString>;
  administeredBy?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  endpoint?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  phonetic?: SearchParameter<SearchTypeString>;
  addressUse?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  addressCity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsInventoryItem = {
  identifier?: SearchParameter<SearchTypeToken>;
  code?: SearchParameter<SearchTypeToken>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsInventoryReport = {
  itemReference?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  identifier?: SearchParameter<SearchTypeToken>;
  item?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsInvoice = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  totalgross?: SearchParameter<SearchTypeQuantity>;
  participantRole?: SearchParameter<SearchTypeToken>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  type?: SearchParameter<SearchTypeToken>;
  issuer?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  participant?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  totalnet?: SearchParameter<SearchTypeQuantity>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  recipient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  account?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsLibrary = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  successor?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  derivedFrom?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  predecessor?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  composedOf?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  title?: SearchParameter<SearchTypeString>;
  type?: SearchParameter<SearchTypeToken>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  dependsOn?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  effective?: SearchParameter<SearchTypeDate>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  topic?: SearchParameter<SearchTypeToken>;
  contentType?: SearchParameter<SearchTypeToken>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsLinkage = {
  item?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  author?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  source?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
} & R5SearchParamsAll;

export type R5SearchParamsList = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  emptyReason?: SearchParameter<SearchTypeToken>;
  item?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  code?: SearchParameter<SearchTypeToken>;
  notes?: SearchParameter<SearchTypeString>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  encounter?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  source?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  title?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsLocation = {
  identifier?: SearchParameter<SearchTypeToken>;
  partof?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  address?: SearchParameter<SearchTypeString>;
  addressState?: SearchParameter<SearchTypeString>;
  operationalStatus?: SearchParameter<SearchTypeToken>;
  type?: SearchParameter<SearchTypeToken>;
  addressPostalcode?: SearchParameter<SearchTypeString>;
  characteristic?: SearchParameter<SearchTypeToken>;
  addressCountry?: SearchParameter<SearchTypeString>;
  endpoint?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  contains?: SearchParameter<SearchTypeString>;
  organization?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  addressUse?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  near?: SearchParameter<SearchTypeString>;
  addressCity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsManufacturedItemDefinition = {
  identifier?: SearchParameter<SearchTypeToken>;
  ingredient?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeToken>;
  doseForm?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsMeasure = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  successor?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  derivedFrom?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  predecessor?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  composedOf?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  title?: SearchParameter<SearchTypeString>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  dependsOn?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  effective?: SearchParameter<SearchTypeDate>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  topic?: SearchParameter<SearchTypeToken>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsMeasureReport = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  period?: SearchParameter<SearchTypeDate>;
  measure?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  reporter?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  location?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  evaluatedResource?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsMedication = {
  ingredientCode?: SearchParameter<SearchTypeToken>;
  identifier?: SearchParameter<SearchTypeToken>;
  code?: SearchParameter<SearchTypeToken>;
  ingredient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  form?: SearchParameter<SearchTypeToken>;
  lotNumber?: SearchParameter<SearchTypeToken>;
  serialNumber?: SearchParameter<SearchTypeToken>;
  expirationDate?: SearchParameter<SearchTypeDate>;
  marketingauthorizationholder?: SearchParameter<
    SearchTypeReference<R5SearchParamsTypes>
  >;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsMedicationAdministration = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  request?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  code?: SearchParameter<SearchTypeToken>;
  performer?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  performerDeviceCode?: SearchParameter<SearchTypeToken>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  medication?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  reasonGiven?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  encounter?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  reasonGivenCode?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  reasonNotGiven?: SearchParameter<SearchTypeToken>;
  device?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsMedicationDispense = {
  identifier?: SearchParameter<SearchTypeToken>;
  code?: SearchParameter<SearchTypeToken>;
  performer?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  receiver?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  destination?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  medication?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  responsibleparty?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  encounter?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  type?: SearchParameter<SearchTypeToken>;
  recorded?: SearchParameter<SearchTypeDate>;
  whenhandedover?: SearchParameter<SearchTypeDate>;
  whenprepared?: SearchParameter<SearchTypeDate>;
  prescription?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  location?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsMedicationKnowledge = {
  productType?: SearchParameter<SearchTypeToken>;
  identifier?: SearchParameter<SearchTypeToken>;
  code?: SearchParameter<SearchTypeToken>;
  ingredient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  doseform?: SearchParameter<SearchTypeToken>;
  classificationType?: SearchParameter<SearchTypeToken>;
  monographType?: SearchParameter<SearchTypeToken>;
  classification?: SearchParameter<SearchTypeToken>;
  ingredientCode?: SearchParameter<SearchTypeToken>;
  packagingCostConcept?: SearchParameter<SearchTypeToken>;
  sourceCost?: SearchParameter<SearchTypeToken>;
  monitoringProgramName?: SearchParameter<SearchTypeToken>;
  monograph?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  monitoringProgramType?: SearchParameter<SearchTypeToken>;
  packagingCost?: SearchParameter<SearchTypeQuantity>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsMedicationRequest = {
  requester?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  identifier?: SearchParameter<SearchTypeToken>;
  intendedDispenser?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  authoredon?: SearchParameter<SearchTypeDate>;
  code?: SearchParameter<SearchTypeToken>;
  comboDate?: SearchParameter<SearchTypeDate>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  medication?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  encounter?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  priority?: SearchParameter<SearchTypeToken>;
  intent?: SearchParameter<SearchTypeToken>;
  groupIdentifier?: SearchParameter<SearchTypeToken>;
  intendedPerformer?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  intendedPerformertype?: SearchParameter<SearchTypeToken>;
  category?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsMedicationStatement = {
  effective?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  code?: SearchParameter<SearchTypeToken>;
  adherence?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  medication?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  encounter?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  source?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  category?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsMedicinalProductDefinition = {
  identifier?: SearchParameter<SearchTypeToken>;
  ingredient?: SearchParameter<SearchTypeToken>;
  masterFile?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  contact?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  domain?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  nameLanguage?: SearchParameter<SearchTypeToken>;
  type?: SearchParameter<SearchTypeToken>;
  characteristic?: SearchParameter<SearchTypeToken>;
  characteristicType?: SearchParameter<SearchTypeToken>;
  productClassification?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsMessageDefinition = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  parent?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  description?: SearchParameter<SearchTypeString>;
  focus?: SearchParameter<SearchTypeToken>;
  contextType?: SearchParameter<SearchTypeToken>;
  title?: SearchParameter<SearchTypeString>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  category?: SearchParameter<SearchTypeToken>;
  event?: SearchParameter<SearchTypeToken>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsMessageHeader = {
  code?: SearchParameter<SearchTypeToken>;
  receiver?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  sender?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  author?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  responsible?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  destination?: SearchParameter<SearchTypeString>;
  focus?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  responseId?: SearchParameter<SearchTypeToken>;
  source?: SearchParameter<SearchTypeString>;
  event?: SearchParameter<SearchTypeToken>;
  target?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
} & R5SearchParamsAll;

export type R5SearchParamsMolecularSequence = {
  identifier?: SearchParameter<SearchTypeToken>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  focus?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  type?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsNamingSystem = {
  date?: SearchParameter<SearchTypeDate>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  description?: SearchParameter<SearchTypeString>;
  derivedFrom?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  contextType?: SearchParameter<SearchTypeToken>;
  predecessor?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  type?: SearchParameter<SearchTypeToken>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  effective?: SearchParameter<SearchTypeDate>;
  contact?: SearchParameter<SearchTypeString>;
  responsible?: SearchParameter<SearchTypeString>;
  context?: SearchParameter<SearchTypeToken>;
  telecom?: SearchParameter<SearchTypeToken>;
  value?: SearchParameter<SearchTypeString>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  identifier?: SearchParameter<SearchTypeToken>;
  period?: SearchParameter<SearchTypeDate>;
  kind?: SearchParameter<SearchTypeToken>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  idType?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  topic?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsNutritionIntake = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  nutrition?: SearchParameter<SearchTypeToken>;
  code?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  encounter?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  source?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsNutritionOrder = {
  identifier?: SearchParameter<SearchTypeToken>;
  groupIdentifier?: SearchParameter<SearchTypeToken>;
  datetime?: SearchParameter<SearchTypeDate>;
  provider?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  supplement?: SearchParameter<SearchTypeToken>;
  formula?: SearchParameter<SearchTypeToken>;
  encounter?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  oraldiet?: SearchParameter<SearchTypeToken>;
  additive?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsNutritionProduct = {
  identifier?: SearchParameter<SearchTypeToken>;
  code?: SearchParameter<SearchTypeToken>;
  lotNumber?: SearchParameter<SearchTypeToken>;
  serialNumber?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsObservation = {
  date?: SearchParameter<SearchTypeDate>;
  comboDataAbsentReason?: SearchParameter<SearchTypeToken>;
  code?: SearchParameter<SearchTypeToken>;
  comboCodeValueQuantity?: SearchParameter<SearchTypeString>;
  componentDataAbsentReason?: SearchParameter<SearchTypeToken>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  valueConcept?: SearchParameter<SearchTypeToken>;
  valueDate?: SearchParameter<SearchTypeDate>;
  derivedFrom?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  focus?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  partOf?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  componentValueCanonical?: SearchParameter<SearchTypeUri>;
  hasMember?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  valueReference?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  codeValueString?: SearchParameter<SearchTypeString>;
  componentCodeValueQuantity?: SearchParameter<SearchTypeString>;
  basedOn?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  codeValueDate?: SearchParameter<SearchTypeString>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  specimen?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  codeValueQuantity?: SearchParameter<SearchTypeString>;
  componentCode?: SearchParameter<SearchTypeToken>;
  valueMarkdown?: SearchParameter<SearchTypeString>;
  comboCodeValueConcept?: SearchParameter<SearchTypeString>;
  identifier?: SearchParameter<SearchTypeToken>;
  componentValueReference?: SearchParameter<
    SearchTypeReference<R5SearchParamsTypes>
  >;
  performer?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  comboCode?: SearchParameter<SearchTypeToken>;
  method?: SearchParameter<SearchTypeToken>;
  valueQuantity?: SearchParameter<SearchTypeQuantity>;
  componentValueQuantity?: SearchParameter<SearchTypeQuantity>;
  dataAbsentReason?: SearchParameter<SearchTypeToken>;
  comboValueQuantity?: SearchParameter<SearchTypeQuantity>;
  encounter?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  codeValueConcept?: SearchParameter<SearchTypeString>;
  componentCodeValueConcept?: SearchParameter<SearchTypeString>;
  componentValueConcept?: SearchParameter<SearchTypeToken>;
  category?: SearchParameter<SearchTypeToken>;
  device?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  comboValueConcept?: SearchParameter<SearchTypeToken>;
  valueCanonical?: SearchParameter<SearchTypeUri>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsObservationDefinition = {
  identifier?: SearchParameter<SearchTypeToken>;
  code?: SearchParameter<SearchTypeToken>;
  method?: SearchParameter<SearchTypeToken>;
  experimental?: SearchParameter<SearchTypeToken>;
  category?: SearchParameter<SearchTypeToken>;
  title?: SearchParameter<SearchTypeString>;
  url?: SearchParameter<SearchTypeUri>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsOperationDefinition = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  code?: SearchParameter<SearchTypeToken>;
  instance?: SearchParameter<SearchTypeToken>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  kind?: SearchParameter<SearchTypeToken>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  title?: SearchParameter<SearchTypeString>;
  type?: SearchParameter<SearchTypeToken>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  inputProfile?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  outputProfile?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  system?: SearchParameter<SearchTypeToken>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  base?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsOperationOutcome = {} & R5SearchParamsAll;

export type R5SearchParamsOrganization = {
  identifier?: SearchParameter<SearchTypeToken>;
  partof?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  address?: SearchParameter<SearchTypeString>;
  addressState?: SearchParameter<SearchTypeString>;
  active?: SearchParameter<SearchTypeToken>;
  type?: SearchParameter<SearchTypeToken>;
  addressPostalcode?: SearchParameter<SearchTypeString>;
  addressCountry?: SearchParameter<SearchTypeString>;
  endpoint?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  phonetic?: SearchParameter<SearchTypeString>;
  addressUse?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  addressCity?: SearchParameter<SearchTypeString>;
} & R5SearchParamsAll;

export type R5SearchParamsOrganizationAffiliation = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  specialty?: SearchParameter<SearchTypeToken>;
  role?: SearchParameter<SearchTypeToken>;
  active?: SearchParameter<SearchTypeToken>;
  primaryOrganization?: SearchParameter<
    SearchTypeReference<R5SearchParamsTypes>
  >;
  network?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  endpoint?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  phone?: SearchParameter<SearchTypeToken>;
  service?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  participatingOrganization?: SearchParameter<
    SearchTypeReference<R5SearchParamsTypes>
  >;
  location?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  telecom?: SearchParameter<SearchTypeToken>;
  email?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsPackagedProductDefinition = {
  identifier?: SearchParameter<SearchTypeToken>;
  manufacturedItem?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  nutrition?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  package?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  name?: SearchParameter<SearchTypeToken>;
  biological?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  packageFor?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  containedItem?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  medication?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  device?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsParameters = {};

export type R5SearchParamsPatient = {
  given?: SearchParameter<SearchTypeString>;
  identifier?: SearchParameter<SearchTypeToken>;
  address?: SearchParameter<SearchTypeString>;
  birthdate?: SearchParameter<SearchTypeDate>;
  deceased?: SearchParameter<SearchTypeToken>;
  addressState?: SearchParameter<SearchTypeString>;
  gender?: SearchParameter<SearchTypeToken>;
  generalPractitioner?: SearchParameter<
    SearchTypeReference<R5SearchParamsTypes>
  >;
  link?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  active?: SearchParameter<SearchTypeToken>;
  language?: SearchParameter<SearchTypeToken>;
  addressPostalcode?: SearchParameter<SearchTypeString>;
  addressCountry?: SearchParameter<SearchTypeString>;
  deathDate?: SearchParameter<SearchTypeDate>;
  phonetic?: SearchParameter<SearchTypeString>;
  phone?: SearchParameter<SearchTypeToken>;
  organization?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  addressUse?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  telecom?: SearchParameter<SearchTypeToken>;
  addressCity?: SearchParameter<SearchTypeString>;
  family?: SearchParameter<SearchTypeString>;
  email?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsPaymentNotice = {
  identifier?: SearchParameter<SearchTypeToken>;
  request?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  created?: SearchParameter<SearchTypeDate>;
  response?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  reporter?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  paymentStatus?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsPaymentReconciliation = {
  identifier?: SearchParameter<SearchTypeToken>;
  request?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  disposition?: SearchParameter<SearchTypeString>;
  created?: SearchParameter<SearchTypeDate>;
  allocationEncounter?: SearchParameter<
    SearchTypeReference<R5SearchParamsTypes>
  >;
  allocationAccount?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  outcome?: SearchParameter<SearchTypeToken>;
  paymentIssuer?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  requestor?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsPermission = {
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsPerson = {
  identifier?: SearchParameter<SearchTypeToken>;
  given?: SearchParameter<SearchTypeString>;
  address?: SearchParameter<SearchTypeString>;
  birthdate?: SearchParameter<SearchTypeDate>;
  deceased?: SearchParameter<SearchTypeToken>;
  addressState?: SearchParameter<SearchTypeString>;
  gender?: SearchParameter<SearchTypeToken>;
  practitioner?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  link?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  relatedperson?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  addressPostalcode?: SearchParameter<SearchTypeString>;
  addressCountry?: SearchParameter<SearchTypeString>;
  deathDate?: SearchParameter<SearchTypeDate>;
  phonetic?: SearchParameter<SearchTypeString>;
  phone?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  organization?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  addressUse?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  telecom?: SearchParameter<SearchTypeToken>;
  addressCity?: SearchParameter<SearchTypeString>;
  family?: SearchParameter<SearchTypeString>;
  email?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsPlanDefinition = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  successor?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  derivedFrom?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  predecessor?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  composedOf?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  title?: SearchParameter<SearchTypeString>;
  type?: SearchParameter<SearchTypeToken>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  dependsOn?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  effective?: SearchParameter<SearchTypeDate>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  topic?: SearchParameter<SearchTypeToken>;
  definition?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsPractitioner = {
  given?: SearchParameter<SearchTypeString>;
  identifier?: SearchParameter<SearchTypeToken>;
  address?: SearchParameter<SearchTypeString>;
  deceased?: SearchParameter<SearchTypeToken>;
  addressState?: SearchParameter<SearchTypeString>;
  gender?: SearchParameter<SearchTypeToken>;
  qualificationPeriod?: SearchParameter<SearchTypeDate>;
  active?: SearchParameter<SearchTypeToken>;
  addressPostalcode?: SearchParameter<SearchTypeString>;
  addressCountry?: SearchParameter<SearchTypeString>;
  deathDate?: SearchParameter<SearchTypeDate>;
  phonetic?: SearchParameter<SearchTypeString>;
  phone?: SearchParameter<SearchTypeToken>;
  addressUse?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  telecom?: SearchParameter<SearchTypeToken>;
  addressCity?: SearchParameter<SearchTypeString>;
  communication?: SearchParameter<SearchTypeToken>;
  family?: SearchParameter<SearchTypeString>;
  email?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsPractitionerRole = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  specialty?: SearchParameter<SearchTypeToken>;
  role?: SearchParameter<SearchTypeToken>;
  practitioner?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  active?: SearchParameter<SearchTypeToken>;
  characteristic?: SearchParameter<SearchTypeToken>;
  endpoint?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  phone?: SearchParameter<SearchTypeToken>;
  service?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  organization?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  location?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  telecom?: SearchParameter<SearchTypeToken>;
  communication?: SearchParameter<SearchTypeToken>;
  email?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsProcedure = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  code?: SearchParameter<SearchTypeToken>;
  performer?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  instantiatesCanonical?: SearchParameter<
    SearchTypeReference<R5SearchParamsTypes>
  >;
  partOf?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  encounter?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  reasonCode?: SearchParameter<SearchTypeToken>;
  basedOn?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  reasonReference?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  report?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  instantiatesUri?: SearchParameter<SearchTypeUri>;
  location?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  category?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsProvenance = {
  agentType?: SearchParameter<SearchTypeToken>;
  agent?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  signatureType?: SearchParameter<SearchTypeToken>;
  activity?: SearchParameter<SearchTypeToken>;
  encounter?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  recorded?: SearchParameter<SearchTypeDate>;
  when?: SearchParameter<SearchTypeDate>;
  target?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  basedOn?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  location?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  agentRole?: SearchParameter<SearchTypeToken>;
  entity?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
} & R5SearchParamsAll;

export type R5SearchParamsQuestionnaire = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  comboCode?: SearchParameter<SearchTypeToken>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  title?: SearchParameter<SearchTypeString>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  effective?: SearchParameter<SearchTypeDate>;
  subjectType?: SearchParameter<SearchTypeToken>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  questionnaireCode?: SearchParameter<SearchTypeToken>;
  definition?: SearchParameter<SearchTypeUri>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  itemCode?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsQuestionnaireResponse = {
  authored?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  questionnaire?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  basedOn?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  author?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  partOf?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  encounter?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  source?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  itemSubject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsRegulatedAuthorization = {
  identifier?: SearchParameter<SearchTypeToken>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  caseType?: SearchParameter<SearchTypeToken>;
  holder?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  region?: SearchParameter<SearchTypeToken>;
  case?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsRelatedPerson = {
  identifier?: SearchParameter<SearchTypeToken>;
  given?: SearchParameter<SearchTypeString>;
  address?: SearchParameter<SearchTypeString>;
  birthdate?: SearchParameter<SearchTypeDate>;
  addressState?: SearchParameter<SearchTypeString>;
  gender?: SearchParameter<SearchTypeToken>;
  active?: SearchParameter<SearchTypeToken>;
  addressPostalcode?: SearchParameter<SearchTypeString>;
  addressCountry?: SearchParameter<SearchTypeString>;
  phonetic?: SearchParameter<SearchTypeString>;
  phone?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  addressUse?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  telecom?: SearchParameter<SearchTypeToken>;
  addressCity?: SearchParameter<SearchTypeString>;
  family?: SearchParameter<SearchTypeString>;
  relationship?: SearchParameter<SearchTypeToken>;
  email?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsRequestOrchestration = {
  authored?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  code?: SearchParameter<SearchTypeToken>;
  author?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  instantiatesCanonical?: SearchParameter<
    SearchTypeReference<R5SearchParamsTypes>
  >;
  encounter?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  priority?: SearchParameter<SearchTypeToken>;
  intent?: SearchParameter<SearchTypeToken>;
  participant?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  groupIdentifier?: SearchParameter<SearchTypeToken>;
  basedOn?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  instantiatesUri?: SearchParameter<SearchTypeUri>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsRequirements = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  description?: SearchParameter<SearchTypeString>;
  derivedFrom?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  contextType?: SearchParameter<SearchTypeToken>;
  title?: SearchParameter<SearchTypeString>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  actor?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsResearchStudy = {
  date?: SearchParameter<SearchTypeDate>;
  objectiveType?: SearchParameter<SearchTypeToken>;
  studyDesign?: SearchParameter<SearchTypeToken>;
  description?: SearchParameter<SearchTypeString>;
  eligibility?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  partOf?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  title?: SearchParameter<SearchTypeString>;
  progressStatusStatePeriodActual?: SearchParameter<SearchTypeString>;
  recruitmentTarget?: SearchParameter<SearchTypeNumber>;
  protocol?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  classifier?: SearchParameter<SearchTypeToken>;
  keyword?: SearchParameter<SearchTypeToken>;
  focusCode?: SearchParameter<SearchTypeToken>;
  phase?: SearchParameter<SearchTypeToken>;
  identifier?: SearchParameter<SearchTypeToken>;
  progressStatusStateActual?: SearchParameter<SearchTypeString>;
  focusReference?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  objectiveDescription?: SearchParameter<SearchTypeString>;
  progressStatusStatePeriod?: SearchParameter<SearchTypeString>;
  condition?: SearchParameter<SearchTypeToken>;
  site?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  name?: SearchParameter<SearchTypeString>;
  recruitmentActual?: SearchParameter<SearchTypeNumber>;
  region?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsResearchSubject = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  subject_state?: SearchParameter<SearchTypeToken>;
  study?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsRiskAssessment = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  condition?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  performer?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  method?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  probability?: SearchParameter<SearchTypeNumber>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  risk?: SearchParameter<SearchTypeToken>;
  encounter?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
} & R5SearchParamsAll;

export type R5SearchParamsSchedule = {
  actor?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  specialty?: SearchParameter<SearchTypeToken>;
  serviceCategory?: SearchParameter<SearchTypeToken>;
  serviceType?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  active?: SearchParameter<SearchTypeToken>;
  serviceTypeReference?: SearchParameter<
    SearchTypeReference<R5SearchParamsTypes>
  >;
} & R5SearchParamsAll;

export type R5SearchParamsSearchParameter = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  code?: SearchParameter<SearchTypeToken>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  derivedFrom?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  type?: SearchParameter<SearchTypeToken>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  target?: SearchParameter<SearchTypeToken>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  component?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  base?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsServiceRequest = {
  authored?: SearchParameter<SearchTypeDate>;
  requester?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  identifier?: SearchParameter<SearchTypeToken>;
  performer?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  requisition?: SearchParameter<SearchTypeToken>;
  replaces?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  instantiatesCanonical?: SearchParameter<
    SearchTypeReference<R5SearchParamsTypes>
  >;
  encounter?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  occurrence?: SearchParameter<SearchTypeDate>;
  priority?: SearchParameter<SearchTypeToken>;
  intent?: SearchParameter<SearchTypeToken>;
  performerType?: SearchParameter<SearchTypeToken>;
  bodyStructure?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  basedOn?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  codeReference?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  specimen?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  codeConcept?: SearchParameter<SearchTypeToken>;
  instantiatesUri?: SearchParameter<SearchTypeUri>;
  bodySite?: SearchParameter<SearchTypeToken>;
  category?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsSlot = {
  identifier?: SearchParameter<SearchTypeToken>;
  schedule?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  specialty?: SearchParameter<SearchTypeToken>;
  serviceCategory?: SearchParameter<SearchTypeToken>;
  appointmentType?: SearchParameter<SearchTypeToken>;
  serviceType?: SearchParameter<SearchTypeToken>;
  start?: SearchParameter<SearchTypeDate>;
  serviceTypeReference?: SearchParameter<
    SearchTypeReference<R5SearchParamsTypes>
  >;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsSpecimen = {
  identifier?: SearchParameter<SearchTypeToken>;
  parent?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  bodysite?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  collected?: SearchParameter<SearchTypeDate>;
  accession?: SearchParameter<SearchTypeToken>;
  procedure?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  type?: SearchParameter<SearchTypeToken>;
  collector?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  containerDevice?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsSpecimenDefinition = {
  container?: SearchParameter<SearchTypeToken>;
  identifier?: SearchParameter<SearchTypeToken>;
  isDerived?: SearchParameter<SearchTypeToken>;
  experimental?: SearchParameter<SearchTypeToken>;
  typeTested?: SearchParameter<SearchTypeToken>;
  title?: SearchParameter<SearchTypeString>;
  type?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsStructureDefinition = {
  date?: SearchParameter<SearchTypeDate>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  extContextType?: SearchParameter<SearchTypeToken>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  experimental?: SearchParameter<SearchTypeToken>;
  title?: SearchParameter<SearchTypeString>;
  type?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  path?: SearchParameter<SearchTypeToken>;
  basePath?: SearchParameter<SearchTypeToken>;
  context?: SearchParameter<SearchTypeToken>;
  keyword?: SearchParameter<SearchTypeToken>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  extContextExpression?: SearchParameter<SearchTypeToken>;
  identifier?: SearchParameter<SearchTypeToken>;
  valueset?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  kind?: SearchParameter<SearchTypeToken>;
  abstract?: SearchParameter<SearchTypeToken>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  extContext?: SearchParameter<SearchTypeString>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  derivation?: SearchParameter<SearchTypeToken>;
  base?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsStructureMap = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  title?: SearchParameter<SearchTypeString>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsSubscription = {
  owner?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  identifier?: SearchParameter<SearchTypeToken>;
  payload?: SearchParameter<SearchTypeToken>;
  contact?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  topic?: SearchParameter<SearchTypeUri>;
  filterValue?: SearchParameter<SearchTypeString>;
  type?: SearchParameter<SearchTypeToken>;
  contentLevel?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsSubscriptionStatus = {} & R5SearchParamsAll;

export type R5SearchParamsSubscriptionTopic = {
  date?: SearchParameter<SearchTypeDate>;
  effective?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  resource?: SearchParameter<SearchTypeUri>;
  derivedOrSelf?: SearchParameter<SearchTypeUri>;
  event?: SearchParameter<SearchTypeToken>;
  title?: SearchParameter<SearchTypeString>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  status?: SearchParameter<SearchTypeToken>;
  triggerDescription?: SearchParameter<SearchTypeString>;
} & R5SearchParamsAll;

export type R5SearchParamsSubstance = {
  identifier?: SearchParameter<SearchTypeToken>;
  code?: SearchParameter<SearchTypeToken>;
  codeReference?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  quantity?: SearchParameter<SearchTypeQuantity>;
  substanceReference?: SearchParameter<
    SearchTypeReference<R5SearchParamsTypes>
  >;
  expiry?: SearchParameter<SearchTypeDate>;
  category?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsSubstanceDefinition = {
  identifier?: SearchParameter<SearchTypeToken>;
  code?: SearchParameter<SearchTypeToken>;
  domain?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  classification?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsSubstanceNucleicAcid = {} & R5SearchParamsAll;

export type R5SearchParamsSubstancePolymer = {} & R5SearchParamsAll;

export type R5SearchParamsSubstanceProtein = {} & R5SearchParamsAll;

export type R5SearchParamsSubstanceReferenceInformation =
  {} & R5SearchParamsAll;

export type R5SearchParamsSubstanceSourceMaterial = {} & R5SearchParamsAll;

export type R5SearchParamsSupplyDelivery = {
  identifier?: SearchParameter<SearchTypeToken>;
  receiver?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  supplier?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsSupplyRequest = {
  date?: SearchParameter<SearchTypeDate>;
  requester?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  identifier?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  supplier?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  category?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsTask = {
  owner?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  requestedperformerReference?: SearchParameter<
    SearchTypeReference<R5SearchParamsTypes>
  >;
  requester?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  businessStatus?: SearchParameter<SearchTypeToken>;
  identifier?: SearchParameter<SearchTypeToken>;
  period?: SearchParameter<SearchTypeDate>;
  code?: SearchParameter<SearchTypeToken>;
  performer?: SearchParameter<SearchTypeToken>;
  subject?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  focus?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  partOf?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  encounter?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  authoredOn?: SearchParameter<SearchTypeDate>;
  priority?: SearchParameter<SearchTypeToken>;
  intent?: SearchParameter<SearchTypeToken>;
  output?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  actor?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  groupIdentifier?: SearchParameter<SearchTypeToken>;
  basedOn?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  modified?: SearchParameter<SearchTypeDate>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsTerminologyCapabilities = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  title?: SearchParameter<SearchTypeString>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsTestPlan = {
  identifier?: SearchParameter<SearchTypeToken>;
  scope?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  url?: SearchParameter<SearchTypeUri>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsTestReport = {
  result?: SearchParameter<SearchTypeToken>;
  identifier?: SearchParameter<SearchTypeToken>;
  tester?: SearchParameter<SearchTypeString>;
  testscript?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  issued?: SearchParameter<SearchTypeDate>;
  participant?: SearchParameter<SearchTypeUri>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsTestScript = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  description?: SearchParameter<SearchTypeString>;
  testscriptCapability?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  scopeArtifactPhase?: SearchParameter<SearchTypeString>;
  title?: SearchParameter<SearchTypeString>;
  scopeArtifactConformance?: SearchParameter<SearchTypeString>;
  version?: SearchParameter<SearchTypeToken>;
  scopeArtifact?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsTransport = {
  identifier?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsValueSet = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  code?: SearchParameter<SearchTypeToken>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  description?: SearchParameter<SearchTypeString>;
  derivedFrom?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  contextType?: SearchParameter<SearchTypeToken>;
  predecessor?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  title?: SearchParameter<SearchTypeString>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  expansion?: SearchParameter<SearchTypeUri>;
  reference?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  effective?: SearchParameter<SearchTypeDate>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  topic?: SearchParameter<SearchTypeToken>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsVerificationResult = {
  statusDate?: SearchParameter<SearchTypeDate>;
  primarysourceWho?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  primarysourceDate?: SearchParameter<SearchTypeDate>;
  validatorOrganization?: SearchParameter<
    SearchTypeReference<R5SearchParamsTypes>
  >;
  attestationMethod?: SearchParameter<SearchTypeToken>;
  attestationOnbehalfof?: SearchParameter<
    SearchTypeReference<R5SearchParamsTypes>
  >;
  target?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  attestationWho?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  primarysourceType?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParamsVisionPrescription = {
  prescriber?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  identifier?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  datewritten?: SearchParameter<SearchTypeDate>;
  encounter?: SearchParameter<SearchTypeReference<R5SearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R5SearchParamsAll;

export type R5SearchParams = {
  Account: R5SearchParamsAccount;
  ActivityDefinition: R5SearchParamsActivityDefinition;
  ActorDefinition: R5SearchParamsActorDefinition;
  AdministrableProductDefinition: R5SearchParamsAdministrableProductDefinition;
  AdverseEvent: R5SearchParamsAdverseEvent;
  AllergyIntolerance: R5SearchParamsAllergyIntolerance;
  Appointment: R5SearchParamsAppointment;
  AppointmentResponse: R5SearchParamsAppointmentResponse;
  ArtifactAssessment: R5SearchParamsArtifactAssessment;
  AuditEvent: R5SearchParamsAuditEvent;
  Basic: R5SearchParamsBasic;
  Binary: R5SearchParamsBinary;
  BiologicallyDerivedProduct: R5SearchParamsBiologicallyDerivedProduct;
  BiologicallyDerivedProductDispense: R5SearchParamsBiologicallyDerivedProductDispense;
  BodyStructure: R5SearchParamsBodyStructure;
  Bundle: R5SearchParamsBundle;
  CapabilityStatement: R5SearchParamsCapabilityStatement;
  CarePlan: R5SearchParamsCarePlan;
  CareTeam: R5SearchParamsCareTeam;
  ChargeItem: R5SearchParamsChargeItem;
  ChargeItemDefinition: R5SearchParamsChargeItemDefinition;
  Citation: R5SearchParamsCitation;
  Claim: R5SearchParamsClaim;
  ClaimResponse: R5SearchParamsClaimResponse;
  ClinicalImpression: R5SearchParamsClinicalImpression;
  ClinicalUseDefinition: R5SearchParamsClinicalUseDefinition;
  CodeSystem: R5SearchParamsCodeSystem;
  Communication: R5SearchParamsCommunication;
  CommunicationRequest: R5SearchParamsCommunicationRequest;
  CompartmentDefinition: R5SearchParamsCompartmentDefinition;
  Composition: R5SearchParamsComposition;
  ConceptMap: R5SearchParamsConceptMap;
  Condition: R5SearchParamsCondition;
  ConditionDefinition: R5SearchParamsConditionDefinition;
  Consent: R5SearchParamsConsent;
  Contract: R5SearchParamsContract;
  Coverage: R5SearchParamsCoverage;
  CoverageEligibilityRequest: R5SearchParamsCoverageEligibilityRequest;
  CoverageEligibilityResponse: R5SearchParamsCoverageEligibilityResponse;
  DetectedIssue: R5SearchParamsDetectedIssue;
  Device: R5SearchParamsDevice;
  DeviceAssociation: R5SearchParamsDeviceAssociation;
  DeviceDefinition: R5SearchParamsDeviceDefinition;
  DeviceDispense: R5SearchParamsDeviceDispense;
  DeviceMetric: R5SearchParamsDeviceMetric;
  DeviceRequest: R5SearchParamsDeviceRequest;
  DeviceUsage: R5SearchParamsDeviceUsage;
  DiagnosticReport: R5SearchParamsDiagnosticReport;
  DocumentReference: R5SearchParamsDocumentReference;
  Encounter: R5SearchParamsEncounter;
  EncounterHistory: R5SearchParamsEncounterHistory;
  Endpoint: R5SearchParamsEndpoint;
  EnrollmentRequest: R5SearchParamsEnrollmentRequest;
  EnrollmentResponse: R5SearchParamsEnrollmentResponse;
  EpisodeOfCare: R5SearchParamsEpisodeOfCare;
  EventDefinition: R5SearchParamsEventDefinition;
  Evidence: R5SearchParamsEvidence;
  EvidenceReport: R5SearchParamsEvidenceReport;
  EvidenceVariable: R5SearchParamsEvidenceVariable;
  ExampleScenario: R5SearchParamsExampleScenario;
  ExplanationOfBenefit: R5SearchParamsExplanationOfBenefit;
  FamilyMemberHistory: R5SearchParamsFamilyMemberHistory;
  Flag: R5SearchParamsFlag;
  FormularyItem: R5SearchParamsFormularyItem;
  GenomicStudy: R5SearchParamsGenomicStudy;
  Goal: R5SearchParamsGoal;
  GraphDefinition: R5SearchParamsGraphDefinition;
  Group: R5SearchParamsGroup;
  GuidanceResponse: R5SearchParamsGuidanceResponse;
  HealthcareService: R5SearchParamsHealthcareService;
  ImagingSelection: R5SearchParamsImagingSelection;
  ImagingStudy: R5SearchParamsImagingStudy;
  Immunization: R5SearchParamsImmunization;
  ImmunizationEvaluation: R5SearchParamsImmunizationEvaluation;
  ImmunizationRecommendation: R5SearchParamsImmunizationRecommendation;
  ImplementationGuide: R5SearchParamsImplementationGuide;
  Ingredient: R5SearchParamsIngredient;
  InsurancePlan: R5SearchParamsInsurancePlan;
  InventoryItem: R5SearchParamsInventoryItem;
  InventoryReport: R5SearchParamsInventoryReport;
  Invoice: R5SearchParamsInvoice;
  Library: R5SearchParamsLibrary;
  Linkage: R5SearchParamsLinkage;
  List: R5SearchParamsList;
  Location: R5SearchParamsLocation;
  ManufacturedItemDefinition: R5SearchParamsManufacturedItemDefinition;
  Measure: R5SearchParamsMeasure;
  MeasureReport: R5SearchParamsMeasureReport;
  Medication: R5SearchParamsMedication;
  MedicationAdministration: R5SearchParamsMedicationAdministration;
  MedicationDispense: R5SearchParamsMedicationDispense;
  MedicationKnowledge: R5SearchParamsMedicationKnowledge;
  MedicationRequest: R5SearchParamsMedicationRequest;
  MedicationStatement: R5SearchParamsMedicationStatement;
  MedicinalProductDefinition: R5SearchParamsMedicinalProductDefinition;
  MessageDefinition: R5SearchParamsMessageDefinition;
  MessageHeader: R5SearchParamsMessageHeader;
  MolecularSequence: R5SearchParamsMolecularSequence;
  NamingSystem: R5SearchParamsNamingSystem;
  NutritionIntake: R5SearchParamsNutritionIntake;
  NutritionOrder: R5SearchParamsNutritionOrder;
  NutritionProduct: R5SearchParamsNutritionProduct;
  Observation: R5SearchParamsObservation;
  ObservationDefinition: R5SearchParamsObservationDefinition;
  OperationDefinition: R5SearchParamsOperationDefinition;
  OperationOutcome: R5SearchParamsOperationOutcome;
  Organization: R5SearchParamsOrganization;
  OrganizationAffiliation: R5SearchParamsOrganizationAffiliation;
  PackagedProductDefinition: R5SearchParamsPackagedProductDefinition;
  Parameters: R5SearchParamsParameters;
  Patient: R5SearchParamsPatient;
  PaymentNotice: R5SearchParamsPaymentNotice;
  PaymentReconciliation: R5SearchParamsPaymentReconciliation;
  Permission: R5SearchParamsPermission;
  Person: R5SearchParamsPerson;
  PlanDefinition: R5SearchParamsPlanDefinition;
  Practitioner: R5SearchParamsPractitioner;
  PractitionerRole: R5SearchParamsPractitionerRole;
  Procedure: R5SearchParamsProcedure;
  Provenance: R5SearchParamsProvenance;
  Questionnaire: R5SearchParamsQuestionnaire;
  QuestionnaireResponse: R5SearchParamsQuestionnaireResponse;
  RegulatedAuthorization: R5SearchParamsRegulatedAuthorization;
  RelatedPerson: R5SearchParamsRelatedPerson;
  RequestOrchestration: R5SearchParamsRequestOrchestration;
  Requirements: R5SearchParamsRequirements;
  ResearchStudy: R5SearchParamsResearchStudy;
  ResearchSubject: R5SearchParamsResearchSubject;
  RiskAssessment: R5SearchParamsRiskAssessment;
  Schedule: R5SearchParamsSchedule;
  SearchParameter: R5SearchParamsSearchParameter;
  ServiceRequest: R5SearchParamsServiceRequest;
  Slot: R5SearchParamsSlot;
  Specimen: R5SearchParamsSpecimen;
  SpecimenDefinition: R5SearchParamsSpecimenDefinition;
  StructureDefinition: R5SearchParamsStructureDefinition;
  StructureMap: R5SearchParamsStructureMap;
  Subscription: R5SearchParamsSubscription;
  SubscriptionStatus: R5SearchParamsSubscriptionStatus;
  SubscriptionTopic: R5SearchParamsSubscriptionTopic;
  Substance: R5SearchParamsSubstance;
  SubstanceDefinition: R5SearchParamsSubstanceDefinition;
  SubstanceNucleicAcid: R5SearchParamsSubstanceNucleicAcid;
  SubstancePolymer: R5SearchParamsSubstancePolymer;
  SubstanceProtein: R5SearchParamsSubstanceProtein;
  SubstanceReferenceInformation: R5SearchParamsSubstanceReferenceInformation;
  SubstanceSourceMaterial: R5SearchParamsSubstanceSourceMaterial;
  SupplyDelivery: R5SearchParamsSupplyDelivery;
  SupplyRequest: R5SearchParamsSupplyRequest;
  Task: R5SearchParamsTask;
  TerminologyCapabilities: R5SearchParamsTerminologyCapabilities;
  TestPlan: R5SearchParamsTestPlan;
  TestReport: R5SearchParamsTestReport;
  TestScript: R5SearchParamsTestScript;
  Transport: R5SearchParamsTransport;
  ValueSet: R5SearchParamsValueSet;
  VerificationResult: R5SearchParamsVerificationResult;
  VisionPrescription: R5SearchParamsVisionPrescription;
};
