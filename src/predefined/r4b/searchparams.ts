// This file was autogenerated. Changes are futile!

import type {
  SearchParameter,
  SearchTypeDate,
  SearchTypeNumber,
  SearchTypeQuantity,
  SearchTypeReference,
  SearchTypeString,
  SearchTypeToken,
  SearchTypeUri,
} from "@";

type R4BSearchParamsTypes =
  | "Account"
  | "ActivityDefinition"
  | "AdministrableProductDefinition"
  | "AdverseEvent"
  | "AllergyIntolerance"
  | "Appointment"
  | "AppointmentResponse"
  | "AuditEvent"
  | "Basic"
  | "Binary"
  | "BiologicallyDerivedProduct"
  | "BodyStructure"
  | "Bundle"
  | "CapabilityStatement"
  | "CarePlan"
  | "CareTeam"
  | "CatalogEntry"
  | "ChargeItem"
  | "ChargeItemDefinition"
  | "Citation"
  | "Claim"
  | "ClaimResponse"
  | "ClinicalImpression"
  | "ClinicalUseDefinition"
  | "CodeSystem"
  | "Communication"
  | "CommunicationRequest"
  | "CompartmentDefinition"
  | "Composition"
  | "ConceptMap"
  | "Condition"
  | "Consent"
  | "Contract"
  | "Coverage"
  | "CoverageEligibilityRequest"
  | "CoverageEligibilityResponse"
  | "DetectedIssue"
  | "Device"
  | "DeviceDefinition"
  | "DeviceMetric"
  | "DeviceRequest"
  | "DeviceUseStatement"
  | "DiagnosticReport"
  | "DocumentManifest"
  | "DocumentReference"
  | "Encounter"
  | "Endpoint"
  | "EnrollmentRequest"
  | "EnrollmentResponse"
  | "EpisodeOfCare"
  | "EventDefinition"
  | "Evidence"
  | "EvidenceReport"
  | "EvidenceVariable"
  | "ExampleScenario"
  | "ExplanationOfBenefit"
  | "FamilyMemberHistory"
  | "Flag"
  | "Goal"
  | "GraphDefinition"
  | "Group"
  | "GuidanceResponse"
  | "HealthcareService"
  | "ImagingStudy"
  | "Immunization"
  | "ImmunizationEvaluation"
  | "ImmunizationRecommendation"
  | "ImplementationGuide"
  | "Ingredient"
  | "InsurancePlan"
  | "Invoice"
  | "Library"
  | "Linkage"
  | "List"
  | "Location"
  | "ManufacturedItemDefinition"
  | "Measure"
  | "MeasureReport"
  | "Media"
  | "Medication"
  | "MedicationAdministration"
  | "MedicationDispense"
  | "MedicationKnowledge"
  | "MedicationRequest"
  | "MedicationStatement"
  | "MedicinalProductDefinition"
  | "MessageDefinition"
  | "MessageHeader"
  | "MolecularSequence"
  | "NamingSystem"
  | "NutritionOrder"
  | "NutritionProduct"
  | "Observation"
  | "ObservationDefinition"
  | "OperationDefinition"
  | "OperationOutcome"
  | "Organization"
  | "OrganizationAffiliation"
  | "PackagedProductDefinition"
  | "Patient"
  | "PaymentNotice"
  | "PaymentReconciliation"
  | "Person"
  | "PlanDefinition"
  | "Practitioner"
  | "PractitionerRole"
  | "Procedure"
  | "Provenance"
  | "Questionnaire"
  | "QuestionnaireResponse"
  | "RegulatedAuthorization"
  | "RelatedPerson"
  | "RequestGroup"
  | "ResearchDefinition"
  | "ResearchElementDefinition"
  | "ResearchStudy"
  | "ResearchSubject"
  | "RiskAssessment"
  | "Schedule"
  | "SearchParameter"
  | "ServiceRequest"
  | "Slot"
  | "Specimen"
  | "SpecimenDefinition"
  | "StructureDefinition"
  | "StructureMap"
  | "Subscription"
  | "SubscriptionStatus"
  | "SubscriptionTopic"
  | "Substance"
  | "SubstanceDefinition"
  | "SupplyDelivery"
  | "SupplyRequest"
  | "Task"
  | "TerminologyCapabilities"
  | "TestReport"
  | "TestScript"
  | "ValueSet"
  | "VerificationResult"
  | "VisionPrescription";

export type R4BSearchParamsAll = {
  _text?: SearchParameter<SearchTypeString>;
  something?: SearchParameter<SearchTypeString>;
  _list?: SearchParameter<SearchTypeToken>;
  _has?: SearchParameter<SearchTypeString>;
  _type?: SearchParameter<SearchTypeToken>;
  _sort?: SearchParameter<SearchTypeToken>;
  _count?: SearchParameter<SearchTypeNumber>;
  _include?: SearchParameter<SearchTypeToken>;
  _revinclude?: SearchParameter<SearchTypeToken>;
  _summary?: SearchParameter<SearchTypeToken>;
  _elements?: SearchParameter<SearchTypeString>;
  _contained?: SearchParameter<SearchTypeToken>;
  _containedType?: SearchParameter<SearchTypeToken>;
  _query?: SearchParameter<SearchTypeToken>;
  _lastUpdated?: SearchParameter<SearchTypeDate>;
  _security?: SearchParameter<SearchTypeToken>;
  _filter?: SearchParameter<SearchTypeToken>;
  _profile?: SearchParameter<SearchTypeUri>;
  _tag?: SearchParameter<SearchTypeToken>;
  _source?: SearchParameter<SearchTypeUri>;
  _id?: SearchParameter<SearchTypeToken>;
  _content?: SearchParameter<SearchTypeString>;
};

export type R4BSearchParamsAccount = {
  owner?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  identifier?: SearchParameter<SearchTypeToken>;
  period?: SearchParameter<SearchTypeDate>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  name?: SearchParameter<SearchTypeString>;
  type?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsActivityDefinition = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  successor?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  derivedFrom?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  predecessor?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  composedOf?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  title?: SearchParameter<SearchTypeString>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  dependsOn?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  effective?: SearchParameter<SearchTypeDate>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  topic?: SearchParameter<SearchTypeToken>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsAdministrableProductDefinition = {
  identifier?: SearchParameter<SearchTypeToken>;
  manufacturedItem?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  ingredient?: SearchParameter<SearchTypeToken>;
  route?: SearchParameter<SearchTypeToken>;
  doseForm?: SearchParameter<SearchTypeToken>;
  device?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  formOf?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  targetSpecies?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsAdverseEvent = {
  date?: SearchParameter<SearchTypeDate>;
  severity?: SearchParameter<SearchTypeToken>;
  recorder?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  study?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  actuality?: SearchParameter<SearchTypeToken>;
  seriousness?: SearchParameter<SearchTypeToken>;
  subject?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  resultingcondition?: SearchParameter<
    SearchTypeReference<R4BSearchParamsTypes>
  >;
  substance?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  location?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  category?: SearchParameter<SearchTypeToken>;
  event?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsAllergyIntolerance = {
  date?: SearchParameter<SearchTypeDate>;
  severity?: SearchParameter<SearchTypeToken>;
  identifier?: SearchParameter<SearchTypeToken>;
  manifestation?: SearchParameter<SearchTypeToken>;
  recorder?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  code?: SearchParameter<SearchTypeToken>;
  verificationStatus?: SearchParameter<SearchTypeToken>;
  criticality?: SearchParameter<SearchTypeToken>;
  clinicalStatus?: SearchParameter<SearchTypeToken>;
  onset?: SearchParameter<SearchTypeDate>;
  type?: SearchParameter<SearchTypeToken>;
  asserter?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  route?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  category?: SearchParameter<SearchTypeToken>;
  lastDate?: SearchParameter<SearchTypeDate>;
} & R4BSearchParamsAll;

export type R4BSearchParamsAppointment = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  specialty?: SearchParameter<SearchTypeToken>;
  serviceCategory?: SearchParameter<SearchTypeToken>;
  practitioner?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  appointmentType?: SearchParameter<SearchTypeToken>;
  partStatus?: SearchParameter<SearchTypeToken>;
  serviceType?: SearchParameter<SearchTypeToken>;
  slot?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  reasonCode?: SearchParameter<SearchTypeToken>;
  actor?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  basedOn?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  reasonReference?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  supportingInfo?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  location?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsAppointmentResponse = {
  actor?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  identifier?: SearchParameter<SearchTypeToken>;
  practitioner?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  partStatus?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  appointment?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  location?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
} & R4BSearchParamsAll;

export type R4BSearchParamsAuditEvent = {
  date?: SearchParameter<SearchTypeDate>;
  entityType?: SearchParameter<SearchTypeToken>;
  agent?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  address?: SearchParameter<SearchTypeString>;
  entityRole?: SearchParameter<SearchTypeToken>;
  source?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  type?: SearchParameter<SearchTypeToken>;
  altid?: SearchParameter<SearchTypeToken>;
  site?: SearchParameter<SearchTypeToken>;
  agentName?: SearchParameter<SearchTypeString>;
  entityName?: SearchParameter<SearchTypeString>;
  subtype?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  action?: SearchParameter<SearchTypeToken>;
  agentRole?: SearchParameter<SearchTypeToken>;
  entity?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  outcome?: SearchParameter<SearchTypeToken>;
  policy?: SearchParameter<SearchTypeUri>;
} & R4BSearchParamsAll;

export type R4BSearchParamsBasic = {
  identifier?: SearchParameter<SearchTypeToken>;
  code?: SearchParameter<SearchTypeToken>;
  author?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  created?: SearchParameter<SearchTypeDate>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
} & R4BSearchParamsAll;

export type R4BSearchParamsBinary = {} & R4BSearchParamsAll;

export type R4BSearchParamsBiologicallyDerivedProduct = {} & R4BSearchParamsAll;

export type R4BSearchParamsBodyStructure = {
  identifier?: SearchParameter<SearchTypeToken>;
  morphology?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  location?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsBundle = {
  identifier?: SearchParameter<SearchTypeToken>;
  composition?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  message?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  type?: SearchParameter<SearchTypeToken>;
  timestamp?: SearchParameter<SearchTypeDate>;
} & R4BSearchParamsAll;

export type R4BSearchParamsCapabilityStatement = {
  date?: SearchParameter<SearchTypeDate>;
  resourceProfile?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  software?: SearchParameter<SearchTypeString>;
  resource?: SearchParameter<SearchTypeToken>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  format?: SearchParameter<SearchTypeToken>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  fhirversion?: SearchParameter<SearchTypeToken>;
  title?: SearchParameter<SearchTypeString>;
  version?: SearchParameter<SearchTypeToken>;
  supportedProfile?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  url?: SearchParameter<SearchTypeUri>;
  mode?: SearchParameter<SearchTypeToken>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  securityService?: SearchParameter<SearchTypeToken>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  guide?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsCarePlan = {
  careTeam?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  goal?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  performer?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  replaces?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  instantiatesCanonical?: SearchParameter<
    SearchTypeReference<R4BSearchParamsTypes>
  >;
  partOf?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  encounter?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  intent?: SearchParameter<SearchTypeToken>;
  activityReference?: SearchParameter<
    SearchTypeReference<R4BSearchParamsTypes>
  >;
  condition?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  basedOn?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  activityDate?: SearchParameter<SearchTypeDate>;
  instantiatesUri?: SearchParameter<SearchTypeUri>;
  category?: SearchParameter<SearchTypeToken>;
  activityCode?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsCareTeam = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  encounter?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  category?: SearchParameter<SearchTypeToken>;
  participant?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsCatalogEntry = {} & R4BSearchParamsAll;

export type R4BSearchParamsChargeItem = {
  identifier?: SearchParameter<SearchTypeToken>;
  performingOrganization?: SearchParameter<
    SearchTypeReference<R4BSearchParamsTypes>
  >;
  code?: SearchParameter<SearchTypeToken>;
  quantity?: SearchParameter<SearchTypeQuantity>;
  subject?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  occurrence?: SearchParameter<SearchTypeDate>;
  enteredDate?: SearchParameter<SearchTypeDate>;
  performerFunction?: SearchParameter<SearchTypeToken>;
  factorOverride?: SearchParameter<SearchTypeNumber>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  service?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  priceOverride?: SearchParameter<SearchTypeQuantity>;
  context?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  enterer?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  performerActor?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  account?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  requestingOrganization?: SearchParameter<
    SearchTypeReference<R4BSearchParamsTypes>
  >;
} & R4BSearchParamsAll;

export type R4BSearchParamsChargeItemDefinition = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  title?: SearchParameter<SearchTypeString>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  effective?: SearchParameter<SearchTypeDate>;
  context?: SearchParameter<SearchTypeToken>;
  publisher?: SearchParameter<SearchTypeString>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsCitation = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  title?: SearchParameter<SearchTypeString>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  effective?: SearchParameter<SearchTypeDate>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsClaim = {
  careTeam?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  identifier?: SearchParameter<SearchTypeToken>;
  created?: SearchParameter<SearchTypeDate>;
  use?: SearchParameter<SearchTypeToken>;
  encounter?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  priority?: SearchParameter<SearchTypeToken>;
  payee?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  provider?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  insurer?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  detailUdi?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  enterer?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  procedureUdi?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  subdetailUdi?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  facility?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  itemUdi?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsClaimResponse = {
  identifier?: SearchParameter<SearchTypeToken>;
  request?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  disposition?: SearchParameter<SearchTypeString>;
  created?: SearchParameter<SearchTypeDate>;
  insurer?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  use?: SearchParameter<SearchTypeToken>;
  paymentDate?: SearchParameter<SearchTypeDate>;
  outcome?: SearchParameter<SearchTypeToken>;
  requestor?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsClinicalImpression = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  previous?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  findingCode?: SearchParameter<SearchTypeToken>;
  assessor?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  encounter?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  findingRef?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  problem?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  supportingInfo?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  investigation?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsClinicalUseDefinition = {
  contraindicationReference?: SearchParameter<
    SearchTypeReference<R4BSearchParamsTypes>
  >;
  identifier?: SearchParameter<SearchTypeToken>;
  indicationReference?: SearchParameter<
    SearchTypeReference<R4BSearchParamsTypes>
  >;
  product?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  effect?: SearchParameter<SearchTypeToken>;
  interaction?: SearchParameter<SearchTypeToken>;
  indication?: SearchParameter<SearchTypeToken>;
  type?: SearchParameter<SearchTypeToken>;
  contraindication?: SearchParameter<SearchTypeToken>;
  effectReference?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
} & R4BSearchParamsAll;

export type R4BSearchParamsCodeSystem = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  code?: SearchParameter<SearchTypeToken>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  contentMode?: SearchParameter<SearchTypeToken>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  language?: SearchParameter<SearchTypeToken>;
  title?: SearchParameter<SearchTypeString>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  supplements?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  system?: SearchParameter<SearchTypeUri>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsCommunication = {
  identifier?: SearchParameter<SearchTypeToken>;
  subject?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  instantiatesCanonical?: SearchParameter<
    SearchTypeReference<R4BSearchParamsTypes>
  >;
  partOf?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  received?: SearchParameter<SearchTypeDate>;
  encounter?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  medium?: SearchParameter<SearchTypeToken>;
  sent?: SearchParameter<SearchTypeDate>;
  basedOn?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  sender?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  recipient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  instantiatesUri?: SearchParameter<SearchTypeUri>;
  category?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsCommunicationRequest = {
  authored?: SearchParameter<SearchTypeDate>;
  requester?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  identifier?: SearchParameter<SearchTypeToken>;
  replaces?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  encounter?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  medium?: SearchParameter<SearchTypeToken>;
  occurrence?: SearchParameter<SearchTypeDate>;
  priority?: SearchParameter<SearchTypeToken>;
  groupIdentifier?: SearchParameter<SearchTypeToken>;
  basedOn?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  sender?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  recipient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  category?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsCompartmentDefinition = {
  date?: SearchParameter<SearchTypeDate>;
  code?: SearchParameter<SearchTypeToken>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  resource?: SearchParameter<SearchTypeToken>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsComposition = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  period?: SearchParameter<SearchTypeDate>;
  relatedId?: SearchParameter<SearchTypeToken>;
  author?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  confidentiality?: SearchParameter<SearchTypeToken>;
  section?: SearchParameter<SearchTypeToken>;
  encounter?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  title?: SearchParameter<SearchTypeString>;
  type?: SearchParameter<SearchTypeToken>;
  attester?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  entry?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  relatedRef?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  context?: SearchParameter<SearchTypeToken>;
  category?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsConceptMap = {
  date?: SearchParameter<SearchTypeDate>;
  other?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  dependson?: SearchParameter<SearchTypeUri>;
  targetSystem?: SearchParameter<SearchTypeUri>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  source?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  title?: SearchParameter<SearchTypeString>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  sourceUri?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  context?: SearchParameter<SearchTypeToken>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  sourceSystem?: SearchParameter<SearchTypeUri>;
  targetCode?: SearchParameter<SearchTypeToken>;
  targetUri?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  identifier?: SearchParameter<SearchTypeToken>;
  product?: SearchParameter<SearchTypeUri>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  target?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  sourceCode?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsCondition = {
  evidenceDetail?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  severity?: SearchParameter<SearchTypeToken>;
  identifier?: SearchParameter<SearchTypeToken>;
  onsetInfo?: SearchParameter<SearchTypeString>;
  recordedDate?: SearchParameter<SearchTypeDate>;
  code?: SearchParameter<SearchTypeToken>;
  evidence?: SearchParameter<SearchTypeToken>;
  subject?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  verificationStatus?: SearchParameter<SearchTypeToken>;
  clinicalStatus?: SearchParameter<SearchTypeToken>;
  encounter?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  onsetDate?: SearchParameter<SearchTypeDate>;
  abatementDate?: SearchParameter<SearchTypeDate>;
  asserter?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  stage?: SearchParameter<SearchTypeToken>;
  abatementString?: SearchParameter<SearchTypeString>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  abatementAge?: SearchParameter<SearchTypeQuantity>;
  onsetAge?: SearchParameter<SearchTypeQuantity>;
  bodySite?: SearchParameter<SearchTypeToken>;
  category?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsConsent = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  period?: SearchParameter<SearchTypeDate>;
  data?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  purpose?: SearchParameter<SearchTypeToken>;
  sourceReference?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  actor?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  securityLabel?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  organization?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  scope?: SearchParameter<SearchTypeToken>;
  action?: SearchParameter<SearchTypeToken>;
  consentor?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  category?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsContract = {
  identifier?: SearchParameter<SearchTypeToken>;
  instantiates?: SearchParameter<SearchTypeUri>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  authority?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  domain?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  issued?: SearchParameter<SearchTypeDate>;
  url?: SearchParameter<SearchTypeUri>;
  signer?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsCoverage = {
  identifier?: SearchParameter<SearchTypeToken>;
  payor?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  subscriber?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  beneficiary?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  classValue?: SearchParameter<SearchTypeString>;
  type?: SearchParameter<SearchTypeToken>;
  classType?: SearchParameter<SearchTypeToken>;
  dependent?: SearchParameter<SearchTypeString>;
  policyHolder?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsCoverageEligibilityRequest = {
  identifier?: SearchParameter<SearchTypeToken>;
  provider?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  created?: SearchParameter<SearchTypeDate>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  enterer?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  facility?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsCoverageEligibilityResponse = {
  identifier?: SearchParameter<SearchTypeToken>;
  request?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  disposition?: SearchParameter<SearchTypeString>;
  created?: SearchParameter<SearchTypeDate>;
  insurer?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  outcome?: SearchParameter<SearchTypeToken>;
  requestor?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsDetectedIssue = {
  identifier?: SearchParameter<SearchTypeToken>;
  code?: SearchParameter<SearchTypeToken>;
  identified?: SearchParameter<SearchTypeDate>;
  author?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  implicated?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
} & R4BSearchParamsAll;

export type R4BSearchParamsDevice = {
  udiDi?: SearchParameter<SearchTypeString>;
  identifier?: SearchParameter<SearchTypeToken>;
  udiCarrier?: SearchParameter<SearchTypeString>;
  deviceName?: SearchParameter<SearchTypeString>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  organization?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  location?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  model?: SearchParameter<SearchTypeString>;
  type?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  manufacturer?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsDeviceDefinition = {
  identifier?: SearchParameter<SearchTypeToken>;
  parent?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  type?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsDeviceMetric = {
  identifier?: SearchParameter<SearchTypeToken>;
  parent?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  source?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  category?: SearchParameter<SearchTypeToken>;
  type?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsDeviceRequest = {
  insurance?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  requester?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  identifier?: SearchParameter<SearchTypeToken>;
  code?: SearchParameter<SearchTypeToken>;
  performer?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  eventDate?: SearchParameter<SearchTypeDate>;
  subject?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  instantiatesCanonical?: SearchParameter<
    SearchTypeReference<R4BSearchParamsTypes>
  >;
  encounter?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  authoredOn?: SearchParameter<SearchTypeDate>;
  intent?: SearchParameter<SearchTypeToken>;
  groupIdentifier?: SearchParameter<SearchTypeToken>;
  basedOn?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  instantiatesUri?: SearchParameter<SearchTypeUri>;
  device?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  priorRequest?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsDeviceUseStatement = {
  identifier?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  device?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
} & R4BSearchParamsAll;

export type R4BSearchParamsDiagnosticReport = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  code?: SearchParameter<SearchTypeToken>;
  performer?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  encounter?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  media?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  conclusion?: SearchParameter<SearchTypeToken>;
  result?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  basedOn?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  specimen?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  category?: SearchParameter<SearchTypeToken>;
  issued?: SearchParameter<SearchTypeDate>;
  resultsInterpreter?: SearchParameter<
    SearchTypeReference<R4BSearchParamsTypes>
  >;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsDocumentManifest = {
  identifier?: SearchParameter<SearchTypeToken>;
  item?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  relatedId?: SearchParameter<SearchTypeToken>;
  author?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  created?: SearchParameter<SearchTypeDate>;
  subject?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  description?: SearchParameter<SearchTypeString>;
  source?: SearchParameter<SearchTypeUri>;
  type?: SearchParameter<SearchTypeToken>;
  relatedRef?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  recipient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsDocumentReference = {
  date?: SearchParameter<SearchTypeDate>;
  subject?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  description?: SearchParameter<SearchTypeString>;
  language?: SearchParameter<SearchTypeToken>;
  type?: SearchParameter<SearchTypeToken>;
  relation?: SearchParameter<SearchTypeToken>;
  setting?: SearchParameter<SearchTypeToken>;
  related?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  event?: SearchParameter<SearchTypeToken>;
  relationship?: SearchParameter<SearchTypeString>;
  authenticator?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  identifier?: SearchParameter<SearchTypeToken>;
  period?: SearchParameter<SearchTypeDate>;
  custodian?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  author?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  format?: SearchParameter<SearchTypeToken>;
  encounter?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  contenttype?: SearchParameter<SearchTypeToken>;
  securityLabel?: SearchParameter<SearchTypeToken>;
  location?: SearchParameter<SearchTypeUri>;
  category?: SearchParameter<SearchTypeToken>;
  relatesto?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  facility?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsEncounter = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  participantType?: SearchParameter<SearchTypeToken>;
  practitioner?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  episodeOfCare?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  length?: SearchParameter<SearchTypeQuantity>;
  diagnosis?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  appointment?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  partOf?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  type?: SearchParameter<SearchTypeToken>;
  participant?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  reasonCode?: SearchParameter<SearchTypeToken>;
  basedOn?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  reasonReference?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  locationPeriod?: SearchParameter<SearchTypeDate>;
  location?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  serviceProvider?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  specialArrangement?: SearchParameter<SearchTypeToken>;
  class?: SearchParameter<SearchTypeToken>;
  account?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsEndpoint = {
  payloadType?: SearchParameter<SearchTypeToken>;
  identifier?: SearchParameter<SearchTypeToken>;
  connectionType?: SearchParameter<SearchTypeToken>;
  organization?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  name?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsEnrollmentRequest = {
  identifier?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsEnrollmentResponse = {
  identifier?: SearchParameter<SearchTypeToken>;
  request?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsEpisodeOfCare = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  condition?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  organization?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  type?: SearchParameter<SearchTypeToken>;
  careManager?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  incomingReferral?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsEventDefinition = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  successor?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  derivedFrom?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  predecessor?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  composedOf?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  title?: SearchParameter<SearchTypeString>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  dependsOn?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  effective?: SearchParameter<SearchTypeDate>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  topic?: SearchParameter<SearchTypeToken>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsEvidence = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  title?: SearchParameter<SearchTypeString>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  context?: SearchParameter<SearchTypeToken>;
  publisher?: SearchParameter<SearchTypeString>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsEvidenceReport = {
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  identifier?: SearchParameter<SearchTypeToken>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  context?: SearchParameter<SearchTypeToken>;
  publisher?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  url?: SearchParameter<SearchTypeUri>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsEvidenceVariable = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  title?: SearchParameter<SearchTypeString>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsExampleScenario = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  contextType?: SearchParameter<SearchTypeToken>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsExplanationOfBenefit = {
  careTeam?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  coverage?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  identifier?: SearchParameter<SearchTypeToken>;
  created?: SearchParameter<SearchTypeDate>;
  encounter?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  payee?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  disposition?: SearchParameter<SearchTypeString>;
  provider?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  detailUdi?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  claim?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  enterer?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  procedureUdi?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  subdetailUdi?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  facility?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  itemUdi?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsFamilyMemberHistory = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  code?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  sex?: SearchParameter<SearchTypeToken>;
  instantiatesCanonical?: SearchParameter<
    SearchTypeReference<R4BSearchParamsTypes>
  >;
  instantiatesUri?: SearchParameter<SearchTypeUri>;
  relationship?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsFlag = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  author?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  encounter?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
} & R4BSearchParamsAll;

export type R4BSearchParamsGoal = {
  identifier?: SearchParameter<SearchTypeToken>;
  lifecycleStatus?: SearchParameter<SearchTypeToken>;
  achievementStatus?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  startDate?: SearchParameter<SearchTypeDate>;
  category?: SearchParameter<SearchTypeToken>;
  targetDate?: SearchParameter<SearchTypeDate>;
} & R4BSearchParamsAll;

export type R4BSearchParamsGraphDefinition = {
  date?: SearchParameter<SearchTypeDate>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  start?: SearchParameter<SearchTypeToken>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsGroup = {
  actual?: SearchParameter<SearchTypeToken>;
  identifier?: SearchParameter<SearchTypeToken>;
  characteristicValue?: SearchParameter<SearchTypeString>;
  managingEntity?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  code?: SearchParameter<SearchTypeToken>;
  member?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  exclude?: SearchParameter<SearchTypeToken>;
  type?: SearchParameter<SearchTypeToken>;
  value?: SearchParameter<SearchTypeToken>;
  characteristic?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsGuidanceResponse = {
  identifier?: SearchParameter<SearchTypeToken>;
  request?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
} & R4BSearchParamsAll;

export type R4BSearchParamsHealthcareService = {
  identifier?: SearchParameter<SearchTypeToken>;
  endpoint?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  specialty?: SearchParameter<SearchTypeToken>;
  serviceCategory?: SearchParameter<SearchTypeToken>;
  coverageArea?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  organization?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  serviceType?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  active?: SearchParameter<SearchTypeToken>;
  location?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  program?: SearchParameter<SearchTypeToken>;
  characteristic?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsImagingStudy = {
  identifier?: SearchParameter<SearchTypeToken>;
  reason?: SearchParameter<SearchTypeToken>;
  dicomClass?: SearchParameter<SearchTypeToken>;
  bodysite?: SearchParameter<SearchTypeToken>;
  instance?: SearchParameter<SearchTypeToken>;
  modality?: SearchParameter<SearchTypeToken>;
  performer?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  interpreter?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  started?: SearchParameter<SearchTypeDate>;
  encounter?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  referrer?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  endpoint?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  series?: SearchParameter<SearchTypeToken>;
  basedon?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsImmunization = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  performer?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  reaction?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  lotNumber?: SearchParameter<SearchTypeString>;
  statusReason?: SearchParameter<SearchTypeToken>;
  reasonCode?: SearchParameter<SearchTypeToken>;
  manufacturer?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  targetDisease?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  series?: SearchParameter<SearchTypeString>;
  vaccineCode?: SearchParameter<SearchTypeToken>;
  reasonReference?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  location?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  reactionDate?: SearchParameter<SearchTypeDate>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsImmunizationEvaluation = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  targetDisease?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  doseStatus?: SearchParameter<SearchTypeToken>;
  immunizationEvent?: SearchParameter<
    SearchTypeReference<R4BSearchParamsTypes>
  >;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsImmunizationRecommendation = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  targetDisease?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  vaccineType?: SearchParameter<SearchTypeToken>;
  information?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  support?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsImplementationGuide = {
  date?: SearchParameter<SearchTypeDate>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  resource?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  experimental?: SearchParameter<SearchTypeToken>;
  global?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  title?: SearchParameter<SearchTypeString>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  dependsOn?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsIngredient = {
  substanceDefinition?: SearchParameter<
    SearchTypeReference<R4BSearchParamsTypes>
  >;
  identifier?: SearchParameter<SearchTypeToken>;
  role?: SearchParameter<SearchTypeToken>;
  function?: SearchParameter<SearchTypeToken>;
  substance?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  for?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  substanceCode?: SearchParameter<SearchTypeToken>;
  manufacturer?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
} & R4BSearchParamsAll;

export type R4BSearchParamsInsurancePlan = {
  identifier?: SearchParameter<SearchTypeToken>;
  address?: SearchParameter<SearchTypeString>;
  addressState?: SearchParameter<SearchTypeString>;
  ownedBy?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  type?: SearchParameter<SearchTypeToken>;
  addressPostalcode?: SearchParameter<SearchTypeString>;
  addressCountry?: SearchParameter<SearchTypeString>;
  administeredBy?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  endpoint?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  phonetic?: SearchParameter<SearchTypeString>;
  addressUse?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  addressCity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsInvoice = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  totalgross?: SearchParameter<SearchTypeQuantity>;
  participantRole?: SearchParameter<SearchTypeToken>;
  subject?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  type?: SearchParameter<SearchTypeToken>;
  issuer?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  participant?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  totalnet?: SearchParameter<SearchTypeQuantity>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  recipient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  account?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsLibrary = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  successor?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  derivedFrom?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  predecessor?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  composedOf?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  title?: SearchParameter<SearchTypeString>;
  type?: SearchParameter<SearchTypeToken>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  dependsOn?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  effective?: SearchParameter<SearchTypeDate>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  topic?: SearchParameter<SearchTypeToken>;
  contentType?: SearchParameter<SearchTypeToken>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsLinkage = {
  item?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  author?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  source?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
} & R4BSearchParamsAll;

export type R4BSearchParamsList = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  emptyReason?: SearchParameter<SearchTypeToken>;
  item?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  code?: SearchParameter<SearchTypeToken>;
  notes?: SearchParameter<SearchTypeString>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  encounter?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  source?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  title?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsLocation = {
  identifier?: SearchParameter<SearchTypeToken>;
  partof?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  address?: SearchParameter<SearchTypeString>;
  addressState?: SearchParameter<SearchTypeString>;
  operationalStatus?: SearchParameter<SearchTypeToken>;
  type?: SearchParameter<SearchTypeToken>;
  addressPostalcode?: SearchParameter<SearchTypeString>;
  addressCountry?: SearchParameter<SearchTypeString>;
  endpoint?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  organization?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  addressUse?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  near?: SearchParameter<SearchTypeString>;
  addressCity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsManufacturedItemDefinition = {
  identifier?: SearchParameter<SearchTypeToken>;
  ingredient?: SearchParameter<SearchTypeToken>;
  doseForm?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsMeasure = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  successor?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  derivedFrom?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  predecessor?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  composedOf?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  title?: SearchParameter<SearchTypeString>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  dependsOn?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  effective?: SearchParameter<SearchTypeDate>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  topic?: SearchParameter<SearchTypeToken>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsMeasureReport = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  period?: SearchParameter<SearchTypeDate>;
  measure?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  reporter?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  evaluatedResource?: SearchParameter<
    SearchTypeReference<R4BSearchParamsTypes>
  >;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsMedia = {
  identifier?: SearchParameter<SearchTypeToken>;
  modality?: SearchParameter<SearchTypeToken>;
  created?: SearchParameter<SearchTypeDate>;
  subject?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  encounter?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  type?: SearchParameter<SearchTypeToken>;
  operator?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  site?: SearchParameter<SearchTypeToken>;
  view?: SearchParameter<SearchTypeToken>;
  basedOn?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  device?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsMedication = {
  ingredientCode?: SearchParameter<SearchTypeToken>;
  identifier?: SearchParameter<SearchTypeToken>;
  code?: SearchParameter<SearchTypeToken>;
  ingredient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  form?: SearchParameter<SearchTypeToken>;
  lotNumber?: SearchParameter<SearchTypeToken>;
  expirationDate?: SearchParameter<SearchTypeDate>;
  manufacturer?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsMedicationAdministration = {
  identifier?: SearchParameter<SearchTypeToken>;
  request?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  code?: SearchParameter<SearchTypeToken>;
  performer?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  medication?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  reasonGiven?: SearchParameter<SearchTypeToken>;
  effectiveTime?: SearchParameter<SearchTypeDate>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  context?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  reasonNotGiven?: SearchParameter<SearchTypeToken>;
  device?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsMedicationDispense = {
  identifier?: SearchParameter<SearchTypeToken>;
  code?: SearchParameter<SearchTypeToken>;
  performer?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  receiver?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  destination?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  medication?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  responsibleparty?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  type?: SearchParameter<SearchTypeToken>;
  whenhandedover?: SearchParameter<SearchTypeDate>;
  whenprepared?: SearchParameter<SearchTypeDate>;
  prescription?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  context?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsMedicationKnowledge = {
  code?: SearchParameter<SearchTypeToken>;
  ingredient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  doseform?: SearchParameter<SearchTypeToken>;
  classificationType?: SearchParameter<SearchTypeToken>;
  monographType?: SearchParameter<SearchTypeToken>;
  classification?: SearchParameter<SearchTypeToken>;
  manufacturer?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  ingredientCode?: SearchParameter<SearchTypeToken>;
  sourceCost?: SearchParameter<SearchTypeToken>;
  monitoringProgramName?: SearchParameter<SearchTypeToken>;
  monograph?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  monitoringProgramType?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsMedicationRequest = {
  date?: SearchParameter<SearchTypeDate>;
  requester?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  identifier?: SearchParameter<SearchTypeToken>;
  intendedDispenser?: SearchParameter<
    SearchTypeReference<R4BSearchParamsTypes>
  >;
  authoredon?: SearchParameter<SearchTypeDate>;
  code?: SearchParameter<SearchTypeToken>;
  subject?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  medication?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  encounter?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  priority?: SearchParameter<SearchTypeToken>;
  intent?: SearchParameter<SearchTypeToken>;
  intendedPerformer?: SearchParameter<
    SearchTypeReference<R4BSearchParamsTypes>
  >;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  intendedPerformertype?: SearchParameter<SearchTypeToken>;
  category?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsMedicationStatement = {
  effective?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  code?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  context?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  medication?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  partOf?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  source?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  category?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsMedicinalProductDefinition = {
  identifier?: SearchParameter<SearchTypeToken>;
  ingredient?: SearchParameter<SearchTypeToken>;
  masterFile?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  contact?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  domain?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  nameLanguage?: SearchParameter<SearchTypeToken>;
  type?: SearchParameter<SearchTypeToken>;
  characteristic?: SearchParameter<SearchTypeToken>;
  characteristicType?: SearchParameter<SearchTypeToken>;
  productClassification?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsMessageDefinition = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  parent?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  description?: SearchParameter<SearchTypeString>;
  focus?: SearchParameter<SearchTypeToken>;
  contextType?: SearchParameter<SearchTypeToken>;
  title?: SearchParameter<SearchTypeString>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  category?: SearchParameter<SearchTypeToken>;
  event?: SearchParameter<SearchTypeToken>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsMessageHeader = {
  code?: SearchParameter<SearchTypeToken>;
  receiver?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  author?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  destination?: SearchParameter<SearchTypeString>;
  focus?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  source?: SearchParameter<SearchTypeString>;
  target?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  destinationUri?: SearchParameter<SearchTypeUri>;
  sender?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  sourceUri?: SearchParameter<SearchTypeUri>;
  responsible?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  enterer?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  responseId?: SearchParameter<SearchTypeToken>;
  event?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsMolecularSequence = {
  identifier?: SearchParameter<SearchTypeToken>;
  referenceseqidVariantCoordinate?: SearchParameter<SearchTypeString>;
  chromosome?: SearchParameter<SearchTypeToken>;
  type?: SearchParameter<SearchTypeToken>;
  windowEnd?: SearchParameter<SearchTypeNumber>;
  windowStart?: SearchParameter<SearchTypeNumber>;
  variantEnd?: SearchParameter<SearchTypeNumber>;
  chromosomeVariantCoordinate?: SearchParameter<SearchTypeString>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  variantStart?: SearchParameter<SearchTypeNumber>;
  chromosomeWindowCoordinate?: SearchParameter<SearchTypeString>;
  referenceseqidWindowCoordinate?: SearchParameter<SearchTypeString>;
  referenceseqid?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsNamingSystem = {
  date?: SearchParameter<SearchTypeDate>;
  period?: SearchParameter<SearchTypeDate>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  kind?: SearchParameter<SearchTypeToken>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  type?: SearchParameter<SearchTypeToken>;
  idType?: SearchParameter<SearchTypeToken>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  contact?: SearchParameter<SearchTypeString>;
  responsible?: SearchParameter<SearchTypeString>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  telecom?: SearchParameter<SearchTypeToken>;
  value?: SearchParameter<SearchTypeString>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsNutritionOrder = {
  identifier?: SearchParameter<SearchTypeToken>;
  datetime?: SearchParameter<SearchTypeDate>;
  provider?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  supplement?: SearchParameter<SearchTypeToken>;
  formula?: SearchParameter<SearchTypeToken>;
  instantiatesCanonical?: SearchParameter<
    SearchTypeReference<R4BSearchParamsTypes>
  >;
  instantiatesUri?: SearchParameter<SearchTypeUri>;
  encounter?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  oraldiet?: SearchParameter<SearchTypeToken>;
  additive?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsNutritionProduct = {
  identifier?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsObservation = {
  date?: SearchParameter<SearchTypeDate>;
  comboDataAbsentReason?: SearchParameter<SearchTypeToken>;
  code?: SearchParameter<SearchTypeToken>;
  comboCodeValueQuantity?: SearchParameter<SearchTypeString>;
  componentDataAbsentReason?: SearchParameter<SearchTypeToken>;
  subject?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  valueConcept?: SearchParameter<SearchTypeToken>;
  valueDate?: SearchParameter<SearchTypeDate>;
  derivedFrom?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  focus?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  partOf?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  hasMember?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  codeValueString?: SearchParameter<SearchTypeString>;
  componentCodeValueQuantity?: SearchParameter<SearchTypeString>;
  basedOn?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  codeValueDate?: SearchParameter<SearchTypeString>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  specimen?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  codeValueQuantity?: SearchParameter<SearchTypeString>;
  componentCode?: SearchParameter<SearchTypeToken>;
  comboCodeValueConcept?: SearchParameter<SearchTypeString>;
  valueString?: SearchParameter<SearchTypeString>;
  identifier?: SearchParameter<SearchTypeToken>;
  performer?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  comboCode?: SearchParameter<SearchTypeToken>;
  method?: SearchParameter<SearchTypeToken>;
  valueQuantity?: SearchParameter<SearchTypeQuantity>;
  componentValueQuantity?: SearchParameter<SearchTypeQuantity>;
  dataAbsentReason?: SearchParameter<SearchTypeToken>;
  comboValueQuantity?: SearchParameter<SearchTypeQuantity>;
  encounter?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  codeValueConcept?: SearchParameter<SearchTypeString>;
  componentCodeValueConcept?: SearchParameter<SearchTypeString>;
  componentValueConcept?: SearchParameter<SearchTypeToken>;
  category?: SearchParameter<SearchTypeToken>;
  device?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  comboValueConcept?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsObservationDefinition = {} & R4BSearchParamsAll;

export type R4BSearchParamsOperationDefinition = {
  date?: SearchParameter<SearchTypeDate>;
  code?: SearchParameter<SearchTypeToken>;
  instance?: SearchParameter<SearchTypeToken>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  kind?: SearchParameter<SearchTypeToken>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  title?: SearchParameter<SearchTypeString>;
  type?: SearchParameter<SearchTypeToken>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  inputProfile?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  outputProfile?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  system?: SearchParameter<SearchTypeToken>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  base?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsOperationOutcome = {} & R4BSearchParamsAll;

export type R4BSearchParamsOrganization = {
  identifier?: SearchParameter<SearchTypeToken>;
  partof?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  address?: SearchParameter<SearchTypeString>;
  addressState?: SearchParameter<SearchTypeString>;
  active?: SearchParameter<SearchTypeToken>;
  type?: SearchParameter<SearchTypeToken>;
  addressPostalcode?: SearchParameter<SearchTypeString>;
  addressCountry?: SearchParameter<SearchTypeString>;
  endpoint?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  phonetic?: SearchParameter<SearchTypeString>;
  addressUse?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  addressCity?: SearchParameter<SearchTypeString>;
} & R4BSearchParamsAll;

export type R4BSearchParamsOrganizationAffiliation = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  specialty?: SearchParameter<SearchTypeToken>;
  role?: SearchParameter<SearchTypeToken>;
  active?: SearchParameter<SearchTypeToken>;
  primaryOrganization?: SearchParameter<
    SearchTypeReference<R4BSearchParamsTypes>
  >;
  network?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  endpoint?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  phone?: SearchParameter<SearchTypeToken>;
  service?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  participatingOrganization?: SearchParameter<
    SearchTypeReference<R4BSearchParamsTypes>
  >;
  location?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  telecom?: SearchParameter<SearchTypeToken>;
  email?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsPackagedProductDefinition = {
  identifier?: SearchParameter<SearchTypeToken>;
  manufacturedItem?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  nutrition?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  package?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  name?: SearchParameter<SearchTypeToken>;
  biological?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  packageFor?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  containedItem?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  medication?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  device?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsParameters = {};

export type R4BSearchParamsPatient = {
  given?: SearchParameter<SearchTypeString>;
  identifier?: SearchParameter<SearchTypeToken>;
  address?: SearchParameter<SearchTypeString>;
  birthdate?: SearchParameter<SearchTypeDate>;
  deceased?: SearchParameter<SearchTypeToken>;
  addressState?: SearchParameter<SearchTypeString>;
  gender?: SearchParameter<SearchTypeToken>;
  generalPractitioner?: SearchParameter<
    SearchTypeReference<R4BSearchParamsTypes>
  >;
  link?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  active?: SearchParameter<SearchTypeToken>;
  language?: SearchParameter<SearchTypeToken>;
  addressPostalcode?: SearchParameter<SearchTypeString>;
  addressCountry?: SearchParameter<SearchTypeString>;
  deathDate?: SearchParameter<SearchTypeDate>;
  phonetic?: SearchParameter<SearchTypeString>;
  phone?: SearchParameter<SearchTypeToken>;
  organization?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  addressUse?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  telecom?: SearchParameter<SearchTypeToken>;
  addressCity?: SearchParameter<SearchTypeString>;
  family?: SearchParameter<SearchTypeString>;
  email?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsPaymentNotice = {
  identifier?: SearchParameter<SearchTypeToken>;
  request?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  provider?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  created?: SearchParameter<SearchTypeDate>;
  response?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  paymentStatus?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsPaymentReconciliation = {
  identifier?: SearchParameter<SearchTypeToken>;
  request?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  disposition?: SearchParameter<SearchTypeString>;
  created?: SearchParameter<SearchTypeDate>;
  outcome?: SearchParameter<SearchTypeToken>;
  paymentIssuer?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  requestor?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsPerson = {
  identifier?: SearchParameter<SearchTypeToken>;
  address?: SearchParameter<SearchTypeString>;
  birthdate?: SearchParameter<SearchTypeDate>;
  addressState?: SearchParameter<SearchTypeString>;
  gender?: SearchParameter<SearchTypeToken>;
  practitioner?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  link?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  relatedperson?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  addressPostalcode?: SearchParameter<SearchTypeString>;
  addressCountry?: SearchParameter<SearchTypeString>;
  phonetic?: SearchParameter<SearchTypeString>;
  phone?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  organization?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  addressUse?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  telecom?: SearchParameter<SearchTypeToken>;
  addressCity?: SearchParameter<SearchTypeString>;
  email?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsPlanDefinition = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  successor?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  derivedFrom?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  predecessor?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  composedOf?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  title?: SearchParameter<SearchTypeString>;
  type?: SearchParameter<SearchTypeToken>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  dependsOn?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  effective?: SearchParameter<SearchTypeDate>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  topic?: SearchParameter<SearchTypeToken>;
  definition?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsPractitioner = {
  given?: SearchParameter<SearchTypeString>;
  identifier?: SearchParameter<SearchTypeToken>;
  address?: SearchParameter<SearchTypeString>;
  addressState?: SearchParameter<SearchTypeString>;
  gender?: SearchParameter<SearchTypeToken>;
  active?: SearchParameter<SearchTypeToken>;
  addressPostalcode?: SearchParameter<SearchTypeString>;
  addressCountry?: SearchParameter<SearchTypeString>;
  phonetic?: SearchParameter<SearchTypeString>;
  phone?: SearchParameter<SearchTypeToken>;
  addressUse?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  telecom?: SearchParameter<SearchTypeToken>;
  addressCity?: SearchParameter<SearchTypeString>;
  communication?: SearchParameter<SearchTypeToken>;
  family?: SearchParameter<SearchTypeString>;
  email?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsPractitionerRole = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  specialty?: SearchParameter<SearchTypeToken>;
  role?: SearchParameter<SearchTypeToken>;
  practitioner?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  active?: SearchParameter<SearchTypeToken>;
  endpoint?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  phone?: SearchParameter<SearchTypeToken>;
  service?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  organization?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  location?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  telecom?: SearchParameter<SearchTypeToken>;
  email?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsProcedure = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  code?: SearchParameter<SearchTypeToken>;
  performer?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  instantiatesCanonical?: SearchParameter<
    SearchTypeReference<R4BSearchParamsTypes>
  >;
  partOf?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  encounter?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  reasonCode?: SearchParameter<SearchTypeToken>;
  basedOn?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  reasonReference?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  instantiatesUri?: SearchParameter<SearchTypeUri>;
  location?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  category?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsProvenance = {
  agentType?: SearchParameter<SearchTypeToken>;
  agent?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  signatureType?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  location?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  agentRole?: SearchParameter<SearchTypeToken>;
  recorded?: SearchParameter<SearchTypeDate>;
  when?: SearchParameter<SearchTypeDate>;
  entity?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  target?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
} & R4BSearchParamsAll;

export type R4BSearchParamsQuestionnaire = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  code?: SearchParameter<SearchTypeToken>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  title?: SearchParameter<SearchTypeString>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  effective?: SearchParameter<SearchTypeDate>;
  subjectType?: SearchParameter<SearchTypeToken>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  definition?: SearchParameter<SearchTypeUri>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsQuestionnaireResponse = {
  authored?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  questionnaire?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  basedOn?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  author?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  partOf?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  encounter?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  source?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsRegulatedAuthorization = {
  identifier?: SearchParameter<SearchTypeToken>;
  subject?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  caseType?: SearchParameter<SearchTypeToken>;
  holder?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  region?: SearchParameter<SearchTypeToken>;
  case?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsRelatedPerson = {
  identifier?: SearchParameter<SearchTypeToken>;
  address?: SearchParameter<SearchTypeString>;
  birthdate?: SearchParameter<SearchTypeDate>;
  addressState?: SearchParameter<SearchTypeString>;
  gender?: SearchParameter<SearchTypeToken>;
  active?: SearchParameter<SearchTypeToken>;
  addressPostalcode?: SearchParameter<SearchTypeString>;
  addressCountry?: SearchParameter<SearchTypeString>;
  phonetic?: SearchParameter<SearchTypeString>;
  phone?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  addressUse?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  telecom?: SearchParameter<SearchTypeToken>;
  addressCity?: SearchParameter<SearchTypeString>;
  relationship?: SearchParameter<SearchTypeToken>;
  email?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsRequestGroup = {
  authored?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  code?: SearchParameter<SearchTypeToken>;
  author?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  instantiatesCanonical?: SearchParameter<
    SearchTypeReference<R4BSearchParamsTypes>
  >;
  encounter?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  priority?: SearchParameter<SearchTypeToken>;
  intent?: SearchParameter<SearchTypeToken>;
  participant?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  groupIdentifier?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  instantiatesUri?: SearchParameter<SearchTypeUri>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsResearchDefinition = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  successor?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  derivedFrom?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  predecessor?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  composedOf?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  title?: SearchParameter<SearchTypeString>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  dependsOn?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  effective?: SearchParameter<SearchTypeDate>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  topic?: SearchParameter<SearchTypeToken>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsResearchElementDefinition = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  successor?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  derivedFrom?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  predecessor?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  composedOf?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  title?: SearchParameter<SearchTypeString>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  dependsOn?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  effective?: SearchParameter<SearchTypeDate>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  topic?: SearchParameter<SearchTypeToken>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsResearchStudy = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  partof?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  sponsor?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  focus?: SearchParameter<SearchTypeToken>;
  principalinvestigator?: SearchParameter<
    SearchTypeReference<R4BSearchParamsTypes>
  >;
  title?: SearchParameter<SearchTypeString>;
  protocol?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  site?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  location?: SearchParameter<SearchTypeToken>;
  category?: SearchParameter<SearchTypeToken>;
  keyword?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsResearchSubject = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  study?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  individual?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsRiskAssessment = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  condition?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  performer?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  method?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  probability?: SearchParameter<SearchTypeNumber>;
  subject?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  risk?: SearchParameter<SearchTypeToken>;
  encounter?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
} & R4BSearchParamsAll;

export type R4BSearchParamsSchedule = {
  actor?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  specialty?: SearchParameter<SearchTypeToken>;
  serviceCategory?: SearchParameter<SearchTypeToken>;
  serviceType?: SearchParameter<SearchTypeToken>;
  active?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsSearchParameter = {
  date?: SearchParameter<SearchTypeDate>;
  code?: SearchParameter<SearchTypeToken>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  derivedFrom?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  type?: SearchParameter<SearchTypeToken>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  target?: SearchParameter<SearchTypeToken>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  component?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  base?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsServiceRequest = {
  authored?: SearchParameter<SearchTypeDate>;
  requester?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  identifier?: SearchParameter<SearchTypeToken>;
  code?: SearchParameter<SearchTypeToken>;
  performer?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  requisition?: SearchParameter<SearchTypeToken>;
  replaces?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  instantiatesCanonical?: SearchParameter<
    SearchTypeReference<R4BSearchParamsTypes>
  >;
  encounter?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  occurrence?: SearchParameter<SearchTypeDate>;
  priority?: SearchParameter<SearchTypeToken>;
  intent?: SearchParameter<SearchTypeToken>;
  performerType?: SearchParameter<SearchTypeToken>;
  basedOn?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  specimen?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  instantiatesUri?: SearchParameter<SearchTypeUri>;
  bodySite?: SearchParameter<SearchTypeToken>;
  category?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsSlot = {
  identifier?: SearchParameter<SearchTypeToken>;
  schedule?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  specialty?: SearchParameter<SearchTypeToken>;
  serviceCategory?: SearchParameter<SearchTypeToken>;
  appointmentType?: SearchParameter<SearchTypeToken>;
  serviceType?: SearchParameter<SearchTypeToken>;
  start?: SearchParameter<SearchTypeDate>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsSpecimen = {
  container?: SearchParameter<SearchTypeToken>;
  containerId?: SearchParameter<SearchTypeToken>;
  identifier?: SearchParameter<SearchTypeToken>;
  parent?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  bodysite?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  subject?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  collected?: SearchParameter<SearchTypeDate>;
  accession?: SearchParameter<SearchTypeToken>;
  type?: SearchParameter<SearchTypeToken>;
  collector?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsSpecimenDefinition = {
  container?: SearchParameter<SearchTypeToken>;
  identifier?: SearchParameter<SearchTypeToken>;
  type?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsStructureDefinition = {
  date?: SearchParameter<SearchTypeDate>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  experimental?: SearchParameter<SearchTypeToken>;
  title?: SearchParameter<SearchTypeString>;
  type?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  path?: SearchParameter<SearchTypeToken>;
  basePath?: SearchParameter<SearchTypeToken>;
  context?: SearchParameter<SearchTypeToken>;
  keyword?: SearchParameter<SearchTypeToken>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  identifier?: SearchParameter<SearchTypeToken>;
  valueset?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  kind?: SearchParameter<SearchTypeToken>;
  abstract?: SearchParameter<SearchTypeToken>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  extContext?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  derivation?: SearchParameter<SearchTypeToken>;
  base?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsStructureMap = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  title?: SearchParameter<SearchTypeString>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsSubscription = {
  payload?: SearchParameter<SearchTypeToken>;
  criteria?: SearchParameter<SearchTypeString>;
  contact?: SearchParameter<SearchTypeToken>;
  type?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsSubscriptionStatus = {} & R4BSearchParamsAll;

export type R4BSearchParamsSubscriptionTopic = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  resource?: SearchParameter<SearchTypeUri>;
  derivedOrSelf?: SearchParameter<SearchTypeUri>;
  title?: SearchParameter<SearchTypeString>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  status?: SearchParameter<SearchTypeToken>;
  triggerDescription?: SearchParameter<SearchTypeString>;
} & R4BSearchParamsAll;

export type R4BSearchParamsSubstance = {
  identifier?: SearchParameter<SearchTypeToken>;
  containerIdentifier?: SearchParameter<SearchTypeToken>;
  code?: SearchParameter<SearchTypeToken>;
  quantity?: SearchParameter<SearchTypeQuantity>;
  substanceReference?: SearchParameter<
    SearchTypeReference<R4BSearchParamsTypes>
  >;
  expiry?: SearchParameter<SearchTypeDate>;
  category?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsSubstanceDefinition = {
  identifier?: SearchParameter<SearchTypeToken>;
  code?: SearchParameter<SearchTypeToken>;
  domain?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  classification?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsSupplyDelivery = {
  identifier?: SearchParameter<SearchTypeToken>;
  receiver?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  supplier?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsSupplyRequest = {
  date?: SearchParameter<SearchTypeDate>;
  requester?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  identifier?: SearchParameter<SearchTypeToken>;
  subject?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  supplier?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  category?: SearchParameter<SearchTypeToken>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsTask = {
  owner?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  requester?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  businessStatus?: SearchParameter<SearchTypeToken>;
  identifier?: SearchParameter<SearchTypeToken>;
  period?: SearchParameter<SearchTypeDate>;
  code?: SearchParameter<SearchTypeToken>;
  performer?: SearchParameter<SearchTypeToken>;
  subject?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  focus?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  partOf?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  encounter?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  authoredOn?: SearchParameter<SearchTypeDate>;
  priority?: SearchParameter<SearchTypeToken>;
  intent?: SearchParameter<SearchTypeToken>;
  groupIdentifier?: SearchParameter<SearchTypeToken>;
  basedOn?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  modified?: SearchParameter<SearchTypeDate>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsTerminologyCapabilities = {
  date?: SearchParameter<SearchTypeDate>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  title?: SearchParameter<SearchTypeString>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsTestReport = {
  result?: SearchParameter<SearchTypeToken>;
  identifier?: SearchParameter<SearchTypeToken>;
  tester?: SearchParameter<SearchTypeString>;
  testscript?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  issued?: SearchParameter<SearchTypeDate>;
  participant?: SearchParameter<SearchTypeUri>;
} & R4BSearchParamsAll;

export type R4BSearchParamsTestScript = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  description?: SearchParameter<SearchTypeString>;
  testscriptCapability?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  title?: SearchParameter<SearchTypeString>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsValueSet = {
  date?: SearchParameter<SearchTypeDate>;
  identifier?: SearchParameter<SearchTypeToken>;
  code?: SearchParameter<SearchTypeToken>;
  contextTypeValue?: SearchParameter<SearchTypeString>;
  jurisdiction?: SearchParameter<SearchTypeToken>;
  description?: SearchParameter<SearchTypeString>;
  contextType?: SearchParameter<SearchTypeToken>;
  title?: SearchParameter<SearchTypeString>;
  version?: SearchParameter<SearchTypeToken>;
  url?: SearchParameter<SearchTypeUri>;
  expansion?: SearchParameter<SearchTypeUri>;
  reference?: SearchParameter<SearchTypeUri>;
  contextQuantity?: SearchParameter<SearchTypeQuantity>;
  context?: SearchParameter<SearchTypeToken>;
  name?: SearchParameter<SearchTypeString>;
  publisher?: SearchParameter<SearchTypeString>;
  contextTypeQuantity?: SearchParameter<SearchTypeString>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParamsVerificationResult = {
  target?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
} & R4BSearchParamsAll;

export type R4BSearchParamsVisionPrescription = {
  prescriber?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  identifier?: SearchParameter<SearchTypeToken>;
  patient?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  datewritten?: SearchParameter<SearchTypeDate>;
  encounter?: SearchParameter<SearchTypeReference<R4BSearchParamsTypes>>;
  status?: SearchParameter<SearchTypeToken>;
} & R4BSearchParamsAll;

export type R4BSearchParams = {
  Account: R4BSearchParamsAccount;
  ActivityDefinition: R4BSearchParamsActivityDefinition;
  AdministrableProductDefinition: R4BSearchParamsAdministrableProductDefinition;
  AdverseEvent: R4BSearchParamsAdverseEvent;
  AllergyIntolerance: R4BSearchParamsAllergyIntolerance;
  Appointment: R4BSearchParamsAppointment;
  AppointmentResponse: R4BSearchParamsAppointmentResponse;
  AuditEvent: R4BSearchParamsAuditEvent;
  Basic: R4BSearchParamsBasic;
  Binary: R4BSearchParamsBinary;
  BiologicallyDerivedProduct: R4BSearchParamsBiologicallyDerivedProduct;
  BodyStructure: R4BSearchParamsBodyStructure;
  Bundle: R4BSearchParamsBundle;
  CapabilityStatement: R4BSearchParamsCapabilityStatement;
  CarePlan: R4BSearchParamsCarePlan;
  CareTeam: R4BSearchParamsCareTeam;
  CatalogEntry: R4BSearchParamsCatalogEntry;
  ChargeItem: R4BSearchParamsChargeItem;
  ChargeItemDefinition: R4BSearchParamsChargeItemDefinition;
  Citation: R4BSearchParamsCitation;
  Claim: R4BSearchParamsClaim;
  ClaimResponse: R4BSearchParamsClaimResponse;
  ClinicalImpression: R4BSearchParamsClinicalImpression;
  ClinicalUseDefinition: R4BSearchParamsClinicalUseDefinition;
  CodeSystem: R4BSearchParamsCodeSystem;
  Communication: R4BSearchParamsCommunication;
  CommunicationRequest: R4BSearchParamsCommunicationRequest;
  CompartmentDefinition: R4BSearchParamsCompartmentDefinition;
  Composition: R4BSearchParamsComposition;
  ConceptMap: R4BSearchParamsConceptMap;
  Condition: R4BSearchParamsCondition;
  Consent: R4BSearchParamsConsent;
  Contract: R4BSearchParamsContract;
  Coverage: R4BSearchParamsCoverage;
  CoverageEligibilityRequest: R4BSearchParamsCoverageEligibilityRequest;
  CoverageEligibilityResponse: R4BSearchParamsCoverageEligibilityResponse;
  DetectedIssue: R4BSearchParamsDetectedIssue;
  Device: R4BSearchParamsDevice;
  DeviceDefinition: R4BSearchParamsDeviceDefinition;
  DeviceMetric: R4BSearchParamsDeviceMetric;
  DeviceRequest: R4BSearchParamsDeviceRequest;
  DeviceUseStatement: R4BSearchParamsDeviceUseStatement;
  DiagnosticReport: R4BSearchParamsDiagnosticReport;
  DocumentManifest: R4BSearchParamsDocumentManifest;
  DocumentReference: R4BSearchParamsDocumentReference;
  Encounter: R4BSearchParamsEncounter;
  Endpoint: R4BSearchParamsEndpoint;
  EnrollmentRequest: R4BSearchParamsEnrollmentRequest;
  EnrollmentResponse: R4BSearchParamsEnrollmentResponse;
  EpisodeOfCare: R4BSearchParamsEpisodeOfCare;
  EventDefinition: R4BSearchParamsEventDefinition;
  Evidence: R4BSearchParamsEvidence;
  EvidenceReport: R4BSearchParamsEvidenceReport;
  EvidenceVariable: R4BSearchParamsEvidenceVariable;
  ExampleScenario: R4BSearchParamsExampleScenario;
  ExplanationOfBenefit: R4BSearchParamsExplanationOfBenefit;
  FamilyMemberHistory: R4BSearchParamsFamilyMemberHistory;
  Flag: R4BSearchParamsFlag;
  Goal: R4BSearchParamsGoal;
  GraphDefinition: R4BSearchParamsGraphDefinition;
  Group: R4BSearchParamsGroup;
  GuidanceResponse: R4BSearchParamsGuidanceResponse;
  HealthcareService: R4BSearchParamsHealthcareService;
  ImagingStudy: R4BSearchParamsImagingStudy;
  Immunization: R4BSearchParamsImmunization;
  ImmunizationEvaluation: R4BSearchParamsImmunizationEvaluation;
  ImmunizationRecommendation: R4BSearchParamsImmunizationRecommendation;
  ImplementationGuide: R4BSearchParamsImplementationGuide;
  Ingredient: R4BSearchParamsIngredient;
  InsurancePlan: R4BSearchParamsInsurancePlan;
  Invoice: R4BSearchParamsInvoice;
  Library: R4BSearchParamsLibrary;
  Linkage: R4BSearchParamsLinkage;
  List: R4BSearchParamsList;
  Location: R4BSearchParamsLocation;
  ManufacturedItemDefinition: R4BSearchParamsManufacturedItemDefinition;
  Measure: R4BSearchParamsMeasure;
  MeasureReport: R4BSearchParamsMeasureReport;
  Media: R4BSearchParamsMedia;
  Medication: R4BSearchParamsMedication;
  MedicationAdministration: R4BSearchParamsMedicationAdministration;
  MedicationDispense: R4BSearchParamsMedicationDispense;
  MedicationKnowledge: R4BSearchParamsMedicationKnowledge;
  MedicationRequest: R4BSearchParamsMedicationRequest;
  MedicationStatement: R4BSearchParamsMedicationStatement;
  MedicinalProductDefinition: R4BSearchParamsMedicinalProductDefinition;
  MessageDefinition: R4BSearchParamsMessageDefinition;
  MessageHeader: R4BSearchParamsMessageHeader;
  MolecularSequence: R4BSearchParamsMolecularSequence;
  NamingSystem: R4BSearchParamsNamingSystem;
  NutritionOrder: R4BSearchParamsNutritionOrder;
  NutritionProduct: R4BSearchParamsNutritionProduct;
  Observation: R4BSearchParamsObservation;
  ObservationDefinition: R4BSearchParamsObservationDefinition;
  OperationDefinition: R4BSearchParamsOperationDefinition;
  OperationOutcome: R4BSearchParamsOperationOutcome;
  Organization: R4BSearchParamsOrganization;
  OrganizationAffiliation: R4BSearchParamsOrganizationAffiliation;
  PackagedProductDefinition: R4BSearchParamsPackagedProductDefinition;
  Parameters: R4BSearchParamsParameters;
  Patient: R4BSearchParamsPatient;
  PaymentNotice: R4BSearchParamsPaymentNotice;
  PaymentReconciliation: R4BSearchParamsPaymentReconciliation;
  Person: R4BSearchParamsPerson;
  PlanDefinition: R4BSearchParamsPlanDefinition;
  Practitioner: R4BSearchParamsPractitioner;
  PractitionerRole: R4BSearchParamsPractitionerRole;
  Procedure: R4BSearchParamsProcedure;
  Provenance: R4BSearchParamsProvenance;
  Questionnaire: R4BSearchParamsQuestionnaire;
  QuestionnaireResponse: R4BSearchParamsQuestionnaireResponse;
  RegulatedAuthorization: R4BSearchParamsRegulatedAuthorization;
  RelatedPerson: R4BSearchParamsRelatedPerson;
  RequestGroup: R4BSearchParamsRequestGroup;
  ResearchDefinition: R4BSearchParamsResearchDefinition;
  ResearchElementDefinition: R4BSearchParamsResearchElementDefinition;
  ResearchStudy: R4BSearchParamsResearchStudy;
  ResearchSubject: R4BSearchParamsResearchSubject;
  RiskAssessment: R4BSearchParamsRiskAssessment;
  Schedule: R4BSearchParamsSchedule;
  SearchParameter: R4BSearchParamsSearchParameter;
  ServiceRequest: R4BSearchParamsServiceRequest;
  Slot: R4BSearchParamsSlot;
  Specimen: R4BSearchParamsSpecimen;
  SpecimenDefinition: R4BSearchParamsSpecimenDefinition;
  StructureDefinition: R4BSearchParamsStructureDefinition;
  StructureMap: R4BSearchParamsStructureMap;
  Subscription: R4BSearchParamsSubscription;
  SubscriptionStatus: R4BSearchParamsSubscriptionStatus;
  SubscriptionTopic: R4BSearchParamsSubscriptionTopic;
  Substance: R4BSearchParamsSubstance;
  SubstanceDefinition: R4BSearchParamsSubstanceDefinition;
  SupplyDelivery: R4BSearchParamsSupplyDelivery;
  SupplyRequest: R4BSearchParamsSupplyRequest;
  Task: R4BSearchParamsTask;
  TerminologyCapabilities: R4BSearchParamsTerminologyCapabilities;
  TestReport: R4BSearchParamsTestReport;
  TestScript: R4BSearchParamsTestScript;
  ValueSet: R4BSearchParamsValueSet;
  VerificationResult: R4BSearchParamsVerificationResult;
  VisionPrescription: R4BSearchParamsVisionPrescription;
};
